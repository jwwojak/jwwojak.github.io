{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Hi and welcome. My name is Joe Wojak. I'm a technical writer in NYC.</p> <p>This site contains my resume and technical writing samples. </p>"},{"location":"#next-steps","title":"Next steps","text":"<ul> <li> <p>See Work Experience for information about me and a link to my downloadable resume.</p> </li> <li> <p>See the Writing Samples section for examples of my work.</p> </li> </ul> <p>Contact information is listed below. Thanks for stopping by.</p>"},{"location":"#contact","title":"Contact","text":"<ul> <li>Email: jwojak@gmail.com</li> <li>LinkedIn: www.linkedin.com/in/joewojak</li> <li>GitHub: jwwojak.github.io (and the site you're on now)</li> </ul>"},{"location":"placeholder/","title":"Placeholder","text":"<p>This is a temporary page or placeholder for links connected to resources that are not accessible. </p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ac lectus vel libero cursus aliquam in quis neque. Curabitur facilisis elementum sapien, eget feugiat magna consequat ut. Integer volutpat feugiat auctor. Praesent congue nunc magna, quis laoreet justo venenatis vel. Ut tortor arcu, accumsan quis rutrum sit amet, ultrices et eros. Nulla volutpat nisi diam, ut ornare neque scelerisque et. Donec malesuada, purus id fringilla consequat, ex purus imperdiet turpis, eget sagittis sapien magna tincidunt orci. Phasellus elementum dapibus metus ut aliquet.</p>"},{"location":"resume/resume/","title":"Joe Wojak","text":""},{"location":"resume/resume/#about","title":"About","text":"<p>I\u2019ve written technical documents for both external customers and internal teams. My writing philosophy is to treat documentation like code. This means I favor open-source systems (e.g., MkDocs, Sphinx, Hugo) for creating and managing product documentation.</p>"},{"location":"resume/resume/#experience","title":"Experience","text":""},{"location":"resume/resume/#opentrons","title":"Opentrons","text":"<p>Technical Writer, February 2032-present</p> <ul> <li>Helped write the Opentrons Flex Instruction Manual. This 150-page manual that describes how to set up and use the Flex liquid handling robot.</li> <li>Wrote quick-start guides for the Flex robot modules. These are short, in-box guides that describe how to get starting with the robot and other peripherals. See the Flex 1-Channel Pipette Quickstart and Magnetic Block Quickstart examples.</li> <li>Helped revise Opentrons Python API documentation. Revisions include improved text, content organization, and code samples that accommodate the differences between different robot models.</li> <li>Other API work includes contributing text revisions for various API class methods and their related parameters. See Protocols and Instruments for examples.</li> <li>Writing tools: Sphinx, reStructuredText (.rst), GitHub, JIRA, Confluence, Google docs. </li> </ul>"},{"location":"resume/resume/#spotify","title":"Spotify","text":"<p>Senior Technical Writer, 2017-2022</p> <ul> <li>Wrote developer-facing documentation for Spotify\u2019s internal system architecture. Content improved understanding among engineering teams about using internal services and how Spotify ad serving systems worked.  </li> <li>Wrote and revised training tutorials for engineers. Changes improved accuracy, trust, content adoption, and reduced confusion.</li> <li>Created The Spotify Technical Writing Handbook, a writing and style guide for developers. Adoption helped standardize writing style and organization in Spotify\u2019s internal documentation system.</li> <li>Revised and managed company glossary. Changes improved content organization, definitions, weekly revisions, and included a search feature.</li> <li>Recorded tutorial videos about how to write and use Spotify\u2019s internal documentation system.</li> <li>Helped create a technical writing guild. The guild coordinated writing projects and promoted technical documentation at Spotify.</li> <li>Writing tools and systems: MkDocs, Markdown, GitHub, JIRA, Trello, Confluence, Coda, Loom (video), Google docs.</li> </ul>"},{"location":"resume/resume/#adobe-systems-again","title":"Adobe Systems (again)","text":"<p>Senior Technical Writer, 2015-2017</p> <ul> <li>Returned to Adobe to write and manage documentation for Audience Manager. Efforts brought neglected documentation up-to-date, added API content, and eliminated issue backlog.</li> <li>Created and organized documentation for the Marketing Cloud ID Service and the Marketing Cloud Device Co-Op. Efforts reduced support demands and allowed customers to work with these systems in a self-service manner.</li> <li>Mentored and collaborated with a junior technical writer based in Bucharest, Romania. Efforts prepared him to take my role after leaving Adobe.</li> <li>Writing tools and systems: XMetaL, Oxygen (DITA authoring systems), GitHub, Confluence, Google docs.</li> </ul>"},{"location":"resume/resume/#tapad","title":"Tapad","text":"<p>Senior Technical Writer, 2013-2017</p> <ul> <li>First technical writer hired. Wrote documentation for Tapad\u2019s probabilistic, cross-device ad targeting system. Documentation helped client support teams create targeted ad campaigns for external clients.</li> <li>Worked with engineers to write API, Android, and iOS SDK documentation. </li> <li>Writing tools and systems: Confluence, Google docs.</li> </ul>"},{"location":"resume/resume/#demdexadobe-systems","title":"Demdex/Adobe Systems","text":"<p>Technical Writer 2011-2013</p> <ul> <li>First technical writer hired. Demdex was a data management platform (DMP) acquired by Adobe. Documentation helped advertisers create, segment, target, and deliver ads to online audiences.</li> <li>Worked with engineers to write API, Android, and iOS documentation.</li> <li>Writing tools and systems: Confluence, Google docs.</li> </ul>"},{"location":"resume/resume/#skills","title":"Skills","text":"<ul> <li> <p>Methodology: Written work follows Darwin Information Typing Architecture (DITA) documentation standards.</p> </li> <li> <p>Technologies: HTML editors, DITA/XML systems (Oxygen, XMetaL), Markdown, GitHub, MkDocs, Sphinx, Python.</p> </li> <li>Others: Confluence, Coda, Loom (videos), LucidChart, Google (docs, slides, sheets), JIRA, Trello, Slack, Stack Overflow.</li> </ul>"},{"location":"resume/resume/#education","title":"Education","text":"<ul> <li>Master of Arts: US History, University of Mississippi</li> <li>Bachelor of Arts: History, University of Missouri</li> </ul>"},{"location":"resume/resume/#military","title":"Military","text":"<p>US Army, Honorable discharge.</p>"},{"location":"resume/resume/#contact","title":"Contact","text":"<ul> <li>Email: jwojak@gmail.com</li> <li>LinkedIn: www.linkedin.com/in/joewojak</li> <li>GitHub: jwwojak.github.io (and the site you're on now)</li> </ul>"},{"location":"samples/budget-data-center/","title":"Budget Distribution Among and Within Data Centers","text":"<p>Our data centers receive campaign budgets in direct proportion to the bid requests matched by their bidders. Within a data center, hardware differences between servers affect how much budget each bidder receives.</p>"},{"location":"samples/budget-data-center/#match-rates-and-budget-distribution","title":"Match rates and budget distribution","text":"<p>Budget management is easy when you have only one data center. In this scenario, the bidders receive all the budget available to them. But we have several regional data centers, not just one. This design makes systems fault tolerant and responsive to bid requests, but also exposes the limitations of even budget distribution.</p> <p>For example, with multiple data centers, even budget distribution is inefficient because one data center may receive more bid requests than the others. Also, even distribution strands budget in data centers that don\u2019t get many (or any) bid requests.</p> <p>To help solve the stranded budget problem, our systems allocate budgets to each data center in direct proportion to their match rate. The match rate measures how often the bidders in a data center can fulfill a bid request given the constraints set by each tactic. If a data center and its bidders match more bids, they receive a larger share of the total budget. This is a dynamic method of budget allocation that shifts resources between data centers and bidders in response to demand.</p> <p>In our technology stack, the budget allocator calculates the match rate and Watson manages and distributes budgets to the bidders. For more information about how these systems work, see Understanding Budget Distribution and Update Cycles.</p>"},{"location":"samples/budget-spend-intro/","title":"Budgets, Spending, and Pacing Delays","text":"<p>Sometimes your ad campaign may to start slowly or appear delayed. This behavior may relate to how our systems distribute campaign budgets throughout different data centers and systems. To help you understand and fix this issue, review the information in this section. It examines how our ad serving system manages/distributes budgets and explains how to force a budget update.</p>"},{"location":"samples/budget-update/","title":"Budget Updates Can Delay Tactic Delivery","text":"<p>Asynchronous budget updates can delay tactic delivery from 10 minutes to an hour. However, you can force a budget update if you change and save any setting for a campaign or tactic.</p>"},{"location":"samples/budget-update/#asynchronous-budget-and-bidder-update-cycles","title":"Asynchronous budget and bidder update cycles","text":"<p>Budget allocators and bidders update budget information at different times.</p> <ul> <li> <p>Budget allocators check for budget at 10-minute intervals.</p> </li> <li> <p>The bidders check Watson for budget at 1-hour intervals.</p> </li> </ul> <p>However, ad delivery depends on where the allocators and bidders are in their respective update cycles. These separate update cycles can delay ad delivery from 10 minutes to an hour. For example, if the bidders check for a budget amount:</p> <ul> <li> <p>Before the budget allocator, the tactics may not deliver ads. In this case, the budget allocator might not have had enough time to update and distribute budget before the bidder update cycle runs.</p> </li> <li> <p>After the budget allocator, the tactics may deliver ads. In this case, the budget allocator might have had enough time to update and distribute budget before the bidder update cycle runs.</p> </li> </ul> <p>For details about budget updates work, see Understanding Budget Distribution and Update Cycles.</p>"},{"location":"samples/create-group/","title":"Create a Group","text":"<p>A <code>POST</code> method to create a new user group.</p>"},{"location":"samples/create-group/#request","title":"Request","text":"<p><code>POST /api/v1/groups/</code></p> <pre><code> {\n    \"name\" : &lt;string&gt;,\n    \"description\" : &lt;string_may_be_null&gt;,\n }\n</code></pre>"},{"location":"samples/create-group/#response","title":"Response","text":"<pre><code>  {\n    \"groupId\" : &lt;integer&gt;,\n    \"pid\" : &lt;integer&gt;,\n    \"name\" : &lt;string&gt;,\n    \"description\" : &lt;string_may_be_null&gt;,\n    \"membershipCount\" : &lt;integer&gt;,\n    \"wildcards\" : &lt;list of strings&gt;,\n    \"users\" : &lt;list of user IDs&gt;\n  }\n</code></pre>"},{"location":"samples/create-user/","title":"Create a User","text":"<p>A <code>POST</code> method that creates a new user.</p>"},{"location":"samples/create-user/#request","title":"Request","text":"<p><code>POST /api/v1/users/</code></p> <pre><code>{ \n  \"username\" : &lt;string&gt;,  \n  \"status\" : &lt;\"ACTIVE\"|\"INACTIVE\"|\"LOCKED\"&gt; \n  \"firstName\" : &lt;string&gt;, \n  \"lastName\" : &lt;string&gt;, \n  \"email\" : &lt;string&gt;, \n  \"title\" : &lt;string_may_be_null&gt;, \n  \"phoneNumber\" : &lt;string_may_be_null&gt;, \n  \"groups\" : [&lt;group_1_id&gt;, ...], \n  \"isAdmin\" : true | false \n}\n</code></pre>  <p>Info</p> <p>If <code>isAdmin</code> is <code>true</code>, this creates the user as a partner administrator. This property also lets you know whether a user is already partner admin.</p>"},{"location":"samples/create-user/#response","title":"Response","text":"<pre><code>{ \n  \"pid\" : &lt;integer&gt;, \n  \"userId\": &lt;integer&gt;, \n  \"username\" : &lt;string&gt;,  \n  \"status\" : &lt;\"ACTIVE\"|\"INACTIVE\"|\"LOCKED\"&gt; \n  \"firstName\" : &lt;string&gt;, \n  \"lastName\" : &lt;string&gt;, \n  \"email\" : &lt;string&gt;, \n  \"title\" : &lt;string_may_be_null&gt;, \n  \"phoneNumber\" : &lt;string_may_be_null&gt;, \n  \"groups\" : [&lt;group_1_id&gt;, ...], \n  \"isAdmin\" : &lt;\"true\"|\"false\"&gt; \n\n}\n</code></pre> <p>Returns <code>409 Conflict</code> if the <code>username</code> is already taken.</p>"},{"location":"samples/delete-bulk/","title":"Delete Users in Bulk","text":"<p>A <code>POST</code> method to delete multiple users in bulk.</p>"},{"location":"samples/delete-bulk/#request","title":"Request","text":"<p><code>POST /api/v1/users/bulk-delete</code></p> <pre><code>{[&lt;user_id_1&gt;, &lt;user_id_2&gt;, ...]}\n</code></pre>"},{"location":"samples/delete-bulk/#response","title":"Response","text":"<p>Returns <code>204 No Content</code> if successful. In case of conflict, returns <code>409 Conflict</code>.</p>"},{"location":"samples/delete-group/","title":"Delete a Group","text":"<p>A <code>DELETE</code> method to delete a user group and remove all members from that group.</p>"},{"location":"samples/delete-group/#request","title":"Request","text":"<p><code>DELETE /api/v1/groups/&lt;groupId&gt;</code></p>"},{"location":"samples/delete-group/#response","title":"Response","text":"<p>Returns <code>204 No Content</code> if successful. In case of conflict returns <code>409 Conflict</code>.</p>"},{"location":"samples/delete-groups-bulk/","title":"Delete Groups in Bulk","text":"<p>A <code>DELETE</code> method to delete multiple groups in bulk and remove all members from that group.</p>"},{"location":"samples/delete-groups-bulk/#request","title":"Request","text":"<p><code>DELETE /api/v1/groups/bulk-delete</code></p>"},{"location":"samples/delete-groups-bulk/#response","title":"Response","text":"<p>Returns <code>204 No Content</code> if successful. In case of conflict returns <code>409 Conflict</code>.</p>"},{"location":"samples/delete-user/","title":"Delete a User","text":"<p>A <code>DELETE</code> method to delete a single user.</p>"},{"location":"samples/delete-user/#request","title":"Request","text":"<p><code>DELETE /api/v1/users/&lt;user_id&gt;</code></p>"},{"location":"samples/delete-user/#response","title":"Response","text":"<p>Returns <code>204 No Content</code> if successful. In case of conflict, returns <code>409 Conflict</code>.</p>"},{"location":"samples/force-budget/","title":"Force a Budget Update","text":"<p>You can force an out-of-cycle budget update if you need a tactic to start bidding right away. </p> <p>To force an update, make a change to the campaign or tactic and save that change. For example, you could add a space to a campaign\u2019s description field and save it. Saved changes prompt budget allocators and the bidders to check for new or revised budgets outside of their scheduled update intervals.</p>"},{"location":"samples/graph-basics/","title":"Device Graph Overview","text":"<p>The Device Graph consists of internet-enabled devices seen on a network and the connections (or edges) shared between each device. In the Device Graph, a \"connection\" is not a physical link between devices. In this case, the \"connection\" or \"edge\" refers to a virtual relationship between devices. This relationship is based on how recently and frequently 2 (or more) devices are seen together on a network.</p>"},{"location":"samples/graph-basics/#building-the-device-graph","title":"Building the Device Graph","text":"<p>We build the device graph with a process known as bridging. Bridging lets our systems identify and make connections between devices on the same network. The result is a map of all the devices on a particular network. In addition to bridging, our systems create and assigns various numeric scores to the connections between each device. These scores are designed to quantify relationships (strong or weak) among devices in the graph.</p>"},{"location":"samples/graph-basics/#composition","title":"Composition","text":"<p>A typical device graph contains:</p> <ul> <li>Desktop and laptop computers</li> <li>Tablets</li> <li>Mobile phones</li> <li>Game consoles</li> <li>Internet-enabled television sets</li> <li>Other networked devices</li> </ul>"},{"location":"samples/graph-basics/#data-sources","title":"Data sources","text":"<p>The Device Graph builds device connections from:</p> <ul> <li>HTTP headers in an ad impression.</li> <li>API and SDK calls.</li> <li>Information provided by third-party data partners.</li> </ul> <p>See the following table for more information.</p> <p>   Data sourceDescription   HTTP calls HTTP calls provide the largest data sets used to build the Device Graph. These calls come directly from:     <ul> <li>Webpage code</li> <li>Server-to-server integrations with other data providers or sources</li> </ul> This data includes, but is not limited to:     <ul> <li>Headers passed in an HTTP call</li> <li>Any other data points passed in from third-party partners/integrations</li> </ul> Note: We do not use or accept Personally Identifiable Information (PII) to bridge devices.    Authenticated sources Purchased data from sites that require user authentication. User authentication provides data we use to help build the Device Graph.   APIs or SDKs This is data returned by our APIs or Android and iOS SDKs.   Location-based sources Data from airport, stadium, hotel networks, and similar venues."},{"location":"samples/household-scores/","title":"Household Scores","text":"<p>Household scores measure the relationship strength between nodes (devices) in the Device Graph.</p> <ul> <li> <p>High scores suggest a closer connection between devices in a household than lower scores. High scores improve accuracy, but reduce reach.</p> </li> <li> <p>Low scores suggest a looser connection between devices in a household than higher scores. Low scores reduce accuracy, but increase reach.</p> </li> </ul> <p>Keep in mind, however, that these scored connections are abstract representations of different data points. They are not physical links between nodes.</p>"},{"location":"samples/household-scores/#purpose-of-household-scores","title":"Purpose of household scores","text":"<p>As described in the Device Graph Overview, a device graph is a map of connected devices on a network. By itself, a device map is not very useful because the nodes and connections (edges) between them look identical. As a result, we need a way to identify and define the relationships between each device.</p> <p>A metric, known as a household score helps us understand the relationships between and among different devices. A household score ranges from 1 (weakest) to 10 (strongest). Devices with high scoring edges are more strongly related than devices with lower scoring edges. As an example, see the device graph below.</p>  <p>This diagram shows devices A through E and their corresponding household scores. Within this graph:</p> <ul> <li> <p>Device A shares strong connections with Devices B, C, and D.</p> </li> <li> <p>Devices B, C, D, and E share weak connections among themselves.</p> </li> </ul>"},{"location":"samples/household-scores/#building-household-scores","title":"Building household scores","text":"<p>Our proprietary technology and algorithms help identify household devices and calculate their scores. Some key metrics that contribute to score calculations include:</p> <ul> <li> <p>Frequency: Our technology increases the household score between devices that connect to the same network frequently.</p> </li> <li> <p>Recency: Our technology increases the household score between devices that connect to the same network within a set time interval.</p> </li> <li> <p>Authenticated data: Device information from sites that require authentication. These devices usually have strong household scores because the authentication process ties a device to a specific user.</p> </li> </ul>  <p>Important</p> <p>Household scores increase in value only. To avoid perpetually increasing scores, and maintain data freshness, edges can (and do) expire. The Device Graph removes expired edges and scores from household network maps.</p>"},{"location":"samples/household-scores/#what-do-the-scores-really-mean","title":"What do the scores really mean?","text":"<p>Scores range from 1 (weakest) to 10 (strongest). Choosing one score vs another affects how many devices you can target or how many devices are available for synchronization.</p> <p>But, what does it mean to select a score of 3 compared to 5, or 7, or any other scores?</p> <ul> <li>A score of 1 represents 100% of the available edges.</li> <li>Each score greater than 1 reduces the available edges by 10% (e.g., score 2 reaches 90% of all edges, score 3 reaches 80%, and so on).</li> <li>Scores work on an equal to or greater than basis (e.g., score 7 includes all edges with the same value or higher).</li> </ul> <p>   Score &gt; =% of available edges   1 100%   2 90%   3 80%   4 70%   5 60%   6 50%   7 40%   8 30%   9 20%   10 10%"},{"location":"samples/household-scores/#reach-vs-accuracy","title":"Reach vs accuracy","text":"<p>Reach represents how many devices are available for targeting or synchronization. Accuracy represents how precise you are at delivering relevant content to those devices. Reach and accuracy are inversely proportional. As you increase the household score:</p> <ul> <li> <p>Reach decreases because score targeting includes devices that are equal to or greater than the selected score.</p> </li> <li> <p>Accuracy increases because you're more likely to reach a specific device audience.</p> </li> </ul> <p>Let's use the sample device graph above to demonstrate this behavior. Say you want to synchronize Device A with all the other devices in the graph and set the household score to 7. In this case, you'll reach Devices B (score 7) and D (score 10) only because those devices share an edge with device A that is = &gt; 7. Targeting a score of 7 excludes any edges with lower values.</p>"},{"location":"samples/individual-scores/","title":"Individual Scores","text":"<p>Individual scores measure the relationship strength within a household group in the Device Graph. They also help you sync IDs and reach devices at the user level.</p> <ul> <li> <p>High scores suggest a closer connection between devices and individuals than lower scores. High scores improve accuracy, but reduce reach.</p> </li> <li> <p>Low scores suggest a looser connection between devices and an individuals than higher scores. Low scores reduce accuracy, but increase reach.</p> </li> </ul> <p>Keep in mind, however, that these scored connections are abstract representations of different data points. They are not physical links between nodes.</p>"},{"location":"samples/individual-scores/#purpose-of-individual-scores","title":"Purpose of individual scores","text":"<p>As described in the Device Graph Overview, a device graph is a map of connected devices on a network. By itself, a device map is not very useful because the nodes and connections (edges) between them look identical. As a result, we need a way to identify and define the relationships between each device in a household and attempt to differentiate devices by their individual owners.</p> <p>A metric, known as a household score helps us understand the relationships between and among different devices.</p> <p>After building a graph with a household score, we can develop and apply an individual score to mapped devices in the household. An individual score ranges from 1 (weakest) to 10 (strongest). Devices with higher scores are more likely to belong to the same user than devices with lower scores. Individual scores quantify the relationship between devices and users in a household and help make accurate, cross-device targeting possible.</p>"},{"location":"samples/individual-scores/#individual-and-household-scores-compared","title":"Individual and household scores compared","text":"<p>To help you understand how individual scores work, take a look at the following illustration. It maps household and individual scores in a simple device graph. The graph contains Devices A through D and their corresponding scores.</p>  <p>Let's separate the devices by edge type and drop any connections less than 5. This shows us that:</p> <ul> <li> <p>High household scores between A, B, C, and D suggest these devices belong to the same household.</p> </li> <li> <p>High individual scores between A - C and D - B suggest these devices belong to different users. The other individual edge/score combinations for these devices are too low to make statistically confident assertions about device ownership.</p> </li> <li> <p>Comparing individual scores among all the devices suggests there are 2 distinct device users/owners in this household.</p> </li> </ul>"},{"location":"samples/individual-scores/#building-individual-scores","title":"Building individual scores","text":"<p>Individual scores are based on comparing and scoring the browsing behaviors of different devices described below.</p>"},{"location":"samples/individual-scores/#collect-data","title":"Collect data","text":"<p>The collection process gathers activity data about a device for a given context at a particular time. A context consists of browser or app-based activity such as visiting a website or using an app. The end result is a list of sites or apps visited or used by a device.</p>"},{"location":"samples/individual-scores/#correlate-data","title":"Correlate data","text":"<p>The correlation process builds an activity matrix from collected data. The matrix compares devices to site visits or app usage. For example, visiting a Google fantasy sports site on an iPhone might also show a correlation with visits to sites like ESPN.</p>"},{"location":"samples/individual-scores/#score-edges","title":"Score edges","text":"<p>Within a household, we score edges between devices that overlap on a similar site or app visits. Based on the results from a Pearson correlation, these edges get assigned a raw score that ranges between 0 and 1.</p>"},{"location":"samples/individual-scores/#test-edges","title":"Test edges","text":"<p>Edge testing compares the activity between devices connected by a \"real\" edge with devices connected by a \"false\" edge. A \"real\" edge is an actual connection/relationship between 2 devices. A \"false\" edge is an artificial connection/relationship between to other separate but identical devices. For example, say iPhone A and iPad A share a real edge in the Device Graph. Testing against a false edge links iPhone A to iPad B and iPad A to iPhone B as shown below.</p>  <p>The false edge gets a score, which is compared to the score for the real edge. If the real edge score is greater than the false edge score, the real edge wins. Repeating this test for 1000s of edges lets us create a win rate for the real edge. After testing, we apply a function to the win rate to generate the individual score for the real edge between 2 connected devices.</p>"},{"location":"samples/individual-scores/#bin-scores","title":"Bin scores","text":"<p>Binning creates the 1 - 10 score range. These scores work like household scores. See:</p> <ul> <li>What do these scores really mean?</li> <li>Reach vs accuracy</li> </ul>"},{"location":"samples/list-group-permissions/","title":"List Group Permissions","text":"<p>A <code>GET</code> method to list the permission objects on a group.</p>"},{"location":"samples/list-group-permissions/#request","title":"Request","text":"<p><code>GET /api/v1/groups/{groupId}/permissions</code></p>"},{"location":"samples/list-group-permissions/#response","title":"Response","text":"<pre><code>[{\n \"objectId\" : 34,\n \"objectType\": \"SEGMENT\",\n \"permissions\": [\"READ\", \"WRITE\", \"DELETE\", \"MAP_TO_MODELS\"]\n },\n\n{\n \"objectId\" : \"234\",\n \"objectType\": \"TRAIT\",\n \"permissions\": [\"READ\", \"WRITE\", \"DELETE\", \"MAP_TO_MODELS\"]\n },\n {\n \"objectId\" : 277,\n \"objectType\": \"SEGMENT\",\n \"permissions\": [\"READ\", \"WRITE\", \"MAP_TO_MODELS\"]\n }\n]\n</code></pre> <p>Returns <code>400 Bad Request</code> if the group is inaccessible.</p>"},{"location":"samples/list-groups/","title":"List Groups","text":"<p>A <code>GET</code> method to list user groups.</p>"},{"location":"samples/list-groups/#request","title":"Request","text":"<p><code>GET /api/v1/groups/</code></p>"},{"location":"samples/list-groups/#response","title":"Response","text":"<pre><code>[\n  { \n    \"groupId\" : &lt;integer&gt;,\n    \"pid\" : &lt;integer&gt;,\n    \"name\" : &lt;string&gt;,\n    \"description\" : &lt;string_may_be_null&gt;,\n    \"membershipCount\" : &lt;integer&gt;,\n    \"wildcards\" : &lt;list of strings&gt;,\n    \"users\" : &lt;list of user IDs&gt;\n  }, ...\n]\n</code></pre>"},{"location":"samples/opentrons-intro/","title":"Introduction Placeholder","text":"<p>Content TBD</p>"},{"location":"samples/rm-intro/","title":"Right Media Introduction","text":"<p>Placeholder for content TBD.</p>"},{"location":"samples/samples-intro/","title":"Introduction","text":"<p>This section provides examples of my technical writing. Sections contain related pages, but not the complete documentation for a product or service. This documentation describes actual systems or processes that may or may not be in operation today.</p>"},{"location":"samples/setup-intro/","title":"Introduction","text":"<p>New employees and experienced engineers should review the information in this section. It describes how to set up your development environment and helps you determine if you already have the appropriate permissions, group memberships, and software required to work with data endpoints and create batch workflows. You can't complete the lessons and procedures in this tutorial without a properly configured development environment.</p> <p>The installation procedures in this section are optimized for macOS. However, they should work for Windows and Linux. Also, Windows or Linux users may find some steps too strict or not applicable. Feel free to customize the installation process so it works for you. Whatever operating system you're using, you should still follow these sections and steps in sequence. They're designed to create a development environment that works with this tutorial.</p>"},{"location":"samples/setup-java/","title":"Installing and Verifying Java/JDK","text":"<p>To finish this tutorial, you need Amazon Coretto Java/JDK version 11.</p>"},{"location":"samples/setup-java/#install-javajdk","title":"Install Java/JDK","text":"<p>To install Java/JDK 11, open a terminal window and:</p> <ol> <li> <p>Check the version availability by typing, <code>sdk list java | grep \"11.*amzn\"</code>. The output results should look similar to the following:</p> <pre><code>|  | 11.0.16  | amzn |  | 11.0.16-amzn\n</code></pre> </li> <li> <p>If you don't have v11, download and install it by typing, <code>sdk install java 11.0.16-amzn</code>.</p> </li> <li> <p>Set the version to 11 by typing, <code>sdk default java 11.0.16-amzn</code>.</p> </li> </ol>"},{"location":"samples/setup-java/#verify-javajdk","title":"Verify Java/JDK","text":"<p>After installation, verify that you have the correct version Java/JDK version (V11). To check, open a terminal window and:</p> <ol> <li> <p>Type <code>which java</code>. The output results should look similar to the following:</p> <pre><code>/Users/&lt;your_username&gt;/.sdkman/candidates/java/current/bin/java\n</code></pre> </li> <li> <p>Type <code>java --version</code>. The output results should look similar to the following:</p> <pre><code>openjdk 11.0.16 2022-07-19 LTS\nOpenJDK Runtime Environment Corretto-11.0.16.8.1 (build 11.0.16+8-LTS)\nOpenJDK 64-Bit Server VM Corretto-11.0.16.8.1 (build 11.0.16+8-LTS, mixed mode)\n</code></pre> </li> </ol>"},{"location":"samples/setup-sbt/","title":"Installing and Verifying SBT","text":"<p>To create batch workflows, you need SBT 1.6.</p>"},{"location":"samples/setup-sbt/#install-sbt","title":"Install SBT","text":"<p>To install SBT, open a terminal window and:</p> <ol> <li> <p>Check the version by typing <code>sdk list sbt | grep \"1\\.6\"</code>. This should return a list of SBT versions.</p> <ul> <li>If v1.6 is not installed, continue to step 2.</li> <li>If v1.6 is installed, verify the installation and/or continue to the next page.</li> </ul> </li> <li> <p>Download and install version 1.6 by typing, <code>sdk install sbt 1.6.2</code>. </p> </li> <li> <p>Set the version to 1.6 by typing <code>sdk default sbt 1.6.2</code>. </p> </li> </ol>"},{"location":"samples/setup-sbt/#verify-sbt","title":"Verify SBT","text":"<p>To verify that you have the correct version of SBT (1.6.2), open a terminal window and:</p> <ol> <li> <p>Type <code>which sbt</code>. The output results should look similar to the following:</p> <pre><code>/Users/&lt;your_username&gt;/.sdkman/candidates/sbt/current/bin/sbt\n</code></pre> </li> <li> <p>Type <code>sbt --version</code>. The output results should look similar to the following:</p> <pre><code>sbt version in this project: 1.6.2\nsbt script version: 1.6.2\n</code></pre> </li> </ol>"},{"location":"samples/setup-scala/","title":"Installing and Verifying Scala","text":"<p>To create batch workflows, you need Scala 2.13.</p>"},{"location":"samples/setup-scala/#install-scala","title":"Install Scala","text":"<p>To install Scala, open a terminal window and:</p> <ol> <li> <p>Check the version by typing <code>sdk list scala | grep \"2\\.13\"</code>. This should return a list of Scala versions.</p> <ul> <li>If v2.13 is not installed, continue to step 2.</li> <li>If v2.13 is installed, verify the installation and/or continue to the next page.</li> </ul> </li> <li> <p>Download and install version 2.13 by typing, <code>sdk install scala 2.13.8</code>. </p> </li> <li> <p>Set the version to 2.13.8 by typing, <code>sdk default scala 2.13.8</code>.</p> </li> </ol>"},{"location":"samples/setup-scala/#verify-scala","title":"Verify Scala","text":"<p>To verify that you have the correct version of Scala (2.13), open a terminal window and:</p> <ol> <li> <p>Type <code>which scala</code>. This should return the scala version from a folder named <code>.sdkman</code> and look similar to the following:</p> <pre><code>/Users/&lt;your_username&gt;/ .sdkman/candidates/scala/current/bin/scala\n</code></pre> </li> <li> <p>Type <code>scala --version</code>. This should return results similar to the following:</p> <pre><code>Scala code runner version 2.13.8 -- Copyright 2002-2022 LAMP/EPFL and Lightbend, Inc.\n</code></pre> </li> </ol>"},{"location":"samples/spot-intro/","title":"Introduction","text":"<p>Holding page for intro tbd.</p>"},{"location":"samples/update-cycle/","title":"Understanding Budget Distribution and Update Cycles","text":"<p>The budget allocator, MySQL, Watson, Vertica and the bidders are important components that manage and distribute budgets. Let's look at how their independent operations affect budget data updates and distributions.</p>"},{"location":"samples/update-cycle/#pre-update-budget-distribution","title":"Pre-update budget distribution","text":"<p>In Backoffice, a MySQL database stores budget cap information for ad serving tactics.</p> <p>However, the budgets aren't immediately available to the bidders.</p> <p>Another system, the budget allocator, needs to run first and send bidder match rate data to Watson. Match rates let Watson assign budget amounts to each bidder in proportion to the amount of bids they\u2019ve matched given the constraints set by a tactic. If the bidders don\u2019t have a budget, they\u2019ll just sent match rate data to Vertica where it\u2019s passed on to the budget allocator.</p> <p>In the following illustration, the green circle shows you where budget information is distributed before the budget allocator or the bidders update themselves.</p>"},{"location":"samples/update-cycle/#post-update-budget-distribution","title":"Post-update budget distribution","text":"<p>Let's look at how budget data gets distributed after an update. In the following illustration, the green circle shows you where budget information is distributed after the budget allocator and bidders update themselves.</p>  <p>The table below explains what's happening after a budget distribution cycle.</p> <p>   SystemDescription   Budget allocatorAt 10-minute intervals, the budget allocator checks Vertica for bidder match rate data. It applies a factor to this data, which sets the budget for each bidder, based on their performance. The budget allocator sends this information to MySQL, which passes it on to Watson.   WatsonWatson is the authoritative source of budget information for the bidders. In this system, Watson:     <ul> <li>Allocates budgets to the bidders.</li> <li>Tracks bidder spending.</li> <li>Stops the bidders when they run out of budget.</li> </ul>    Bidders At 1-hour intervals, the bidders load/reload all the available campaign data from Watson. This ensures the bidders have the latest budget and campaign data. Also, this update takes bidder performance into account. As a result, the bidders receive budget amounts in proportion to their match rates, i.e., bidders that match a lot of requests receive more budget than those with fewer bid requests.Finally, the bidders continue to send match rate data to Vertica, which passes that information to the budget allocator."},{"location":"samples/update-group/","title":"Update a Group","text":"<p>A <code>PUT</code> method to update a user group.</p>"},{"location":"samples/update-group/#request","title":"Request","text":"<p><code>PUT /api/v1/groups/</code><code>&lt;groupId&gt;</code></p> <pre><code> {\n    \"name\" : &lt;string&gt;,\n    \"description\" : &lt;string_may_be_null&gt;,\n }\n</code></pre>"},{"location":"samples/update-group/#response","title":"Response","text":"<pre><code>  {\n    \"groupId\" : &lt;integer&gt;,\n    \"pid\" : &lt;integer&gt;,\n    \"name\" : &lt;string&gt;,\n    \"description\" : &lt;string_may_be_null&gt;,\n    \"membershipCount\" : &lt;integer&gt;,\n    \"wildcards\" : &lt;list of strings&gt;,\n    \"users\" : &lt;list of user IDs&gt;\n  }\n</code></pre>"},{"location":"samples/update-user/","title":"Update a User","text":"<p>A <code>PUT</code> method to update a user.</p>"},{"location":"samples/update-user/#request","title":"Request","text":"<p><code>PUT /api/v1/users/</code><code>&lt;userId&gt;</code></p> <pre><code>{ \n  \"username\" : &lt;string&gt;,  \n  \"status\" : &lt;\"ACTIVE\"|\"INACTIVE\"|\"LOCKED\"&gt; \n  \"firstName\" : &lt;string&gt;, \n  \"lastName\" : &lt;string&gt;, \n  \"email\" : &lt;string&gt;, \n  \"title\" : &lt;string_may_be_null&gt;, \n  \"phoneNumber\" : &lt;string_may_be_null&gt;, \n  \"groups\" : [&lt;group_1_id&gt;, ...] \n}\n</code></pre>"},{"location":"samples/update-user/#response","title":"Response","text":"<pre><code>{ \n  \"pid\" : &lt;integer&gt;, \n  \"userId\": &lt;integer&gt;, \n  \"username\" : &lt;string&gt;,  \n  \"status\" : &lt;\"ACTIVE\"|\"INACTIVE\"|\"LOCKED\"&gt; \n  \"firstName\" : &lt;string&gt;, \n  \"lastName\" : &lt;string&gt;, \n  \"email\" : &lt;string&gt;, \n  \"groups\" : [&lt;group_1_id&gt;, ...] \n\n}\n</code></pre> <p>Returns <code>409 Conflict</code> if the <code>username</code> is already taken.</p>"},{"location":"tutorial/annotate/","title":"Annotating Data","text":"<p>Annotations play an important role in data management. For example, annotations help:</p> <ul> <li> <p>Identify datasets that contain personally identifiable information (PII).</p> </li> <li> <p>Data governance teams and systems apply the appropriate level of protection to datasets that contain PII.</p> </li> </ul> <p>See the Data Access and Onboarding Introduction for the most current information and an in-depth guide to this topic.</p>  <p>Note</p> <ul> <li> <p>This section requires no action. We have already annotated the data for you, but please make sure to review this information. It provides background context about data annotations.</p> </li> <li> <p>You must annotate your data when sharing it outside of your team.</p> </li> </ul>"},{"location":"tutorial/annotate/#how-to-annotate","title":"How to annotate","text":"<p>To annotate data, first determine if it contains PII or not (see What is Personal Data for guidance). If your data:</p> <ul> <li> <p>Does not contain PII, annotate it with <code>{ policy: { noPersonalData: true }}</code></p> </li> <li> <p>Contains PII, annotate the field containing personal data with the correct semantic type. If your data contains <code>NARROW</code> or <code>STRICT</code> fields, you must encrypt it. See the Padlock Documentation on encryption.</p> </li> </ul>"},{"location":"tutorial/annotate/#viewing-annotated-data","title":"Viewing annotated data","text":"<p>Search for <code>UserTrackCounts</code> in the <code>README.md</code> of your repository.  Follow the link that takes you to the <code>UserTrackCounts</code> Avro schema file, which should be already annotated.</p> <p>Your dataset includes a <code>userId</code> field. The <code>userId</code> field is based on the <code>user_id</code> stored in the upstream dataset, di.golden.path.Stream.days.v1.parquet. In turn, the <code>user_id</code> is derived from an anonymized Spotify user ID. As previous information suggests, these user ID fields contain sensitive PII that require annotations. See also, the Personal Data Semantic Type Policy spreadsheet. It contains a comprehensive set of fields and their related annotation requirements.</p>"},{"location":"tutorial/create-workflow/","title":"Create a Data Workflow Component","text":"<p>We'll use the Styx Scheduled Scio Pipeline template (Flyte) on Backstage to create a new GHE repository for your data workflow component. Follow these instructions to get started.</p>"},{"location":"tutorial/create-workflow/#component-creation-steps","title":"Component creation steps","text":"<ol> <li> <p>Click the link above to start the creation process. This opens the template section shown below.</p>  </li> <li> <p>Identify and describe your component. Click Next to continue.</p> <ul> <li>Component ID: We suggest <code>de-gp-&lt;username&gt;</code> so others can see this belongs to you.</li> <li>Description: A concise description helps you, and others, understand what the component is or does.</li> </ul> </li> <li> <p>Select an owner and GHE repo for your component. We recommend using your squad name as the owner and setting the repository to a space used by your team's part of the organization. Click Next to continue.</p>  </li> <li> <p>(Optional) Select the ITGC checkbox only if your component is subject to ITGC compliance requirements. See the ITGC Backstage site for more information or if you have questions about ITGC. Click Next to continue.</p>  </li> <li> <p>Identify your GCP project and IAM group.</p> <ul> <li> <p>GCP project: Use one of the projects your squad owns. If you're unsure, ask a squad-mate or create a new project on Backstage.</p> </li> <li> <p>IAM group: Use your squad IAM group, which you can find in Band Manager. It's on your squad's page in the Details section.</p> </li> </ul>  </li> <li> <p>Review your workflow, make changes (if needed), and click Create Component to finish.</p>  </li> </ol>"},{"location":"tutorial/create-workflow/#post-configuration-steps","title":"Post-configuration steps","text":"<p>Backstage may take a few moments to create your component. It will let you know when the component is ready. Also, you can click GHE to see your new workflow repo.</p>"},{"location":"tutorial/endpoints/","title":"Understanding Data Endpoints and Workflows","text":"<p>A data endpoint is an entity that represents a collection of data.</p> <p>A data workflow (often called a data pipeline) reads input from data endpoints, applies transformations, and outputs new data endpoints. Workflows process data in batches that run once per scheduled interval, or in a streaming fashion that runs indefinitely.</p>"},{"location":"tutorial/endpoints/#use-cases","title":"Use cases","text":"<p>Different workflows are suitable for different use cases. In this tutorial, we'll show you how to build a batch workflow. However, many of the concepts taught here remain the same regardless of workflow type. The following table lists and describes the common workflow templates and their related use cases.</p>    Workflow template Use case     Flyte Scio When you need to create computationally demanding and/or resource-intensive dataflow jobs.   Flyte Python When you need to write a workflow using Python.   DBeam When you want to export data from a SQL database to Google Cloud Storage (GCS).   BigQuery Runner When you need to schedule a fully featured workflow running on BigQuery or when it's faster to calculate within BigQuery.   BigQuery Load When you want to export GCS data to BigQuery."},{"location":"tutorial/endpoints/#related-topics","title":"Related topics","text":"<ul> <li>Flyte</li> <li>DBeam</li> </ul>"},{"location":"tutorial/summary/","title":"Summary","text":"<p>Congratulations, you've completed the Data Engineering Shiny Path tutorial. Maybe the journey was a little rough. That's OK. The road is under construction, but hopefully this tutorial helped you:</p> <ul> <li> <p>Understand batch data workflows (pipelines), their use cases, and related engineering concepts.</p> </li> <li> <p>Install and configure the supported tools and services required to create a batch workflow.</p> </li> <li>Build, test, and run a batch data workflow.</li> </ul>"},{"location":"tutorial/summary/#contribute","title":"Contribute","text":"<p>Feedback about your experience is essential to helping us improve the Data Engineering Shiny Path tutorial. Make a contribution to this work by reporting errors, vague or ambiguous text, typos, or other issues you noticed while reading this content and working on the lessons. To report problems or just share some thoughts:</p> <ul> <li> <p>Highlight a section of text and select Open a GHE issue.</p> </li> <li> <p>Click the pen icon in the top right corner of a page, edit the text in GHE, and open a pull request.</p> </li> <li>Post a comment in the #dataex Slack channel.</li> </ul> <p>We appreciate your input and rely on the Spotify community to help us improve and fix confusing or inaccurate content.</p>"},{"location":"tutorial/summary/#go-team","title":"Go team","text":"<p>Working on a potential replacement for the Data Engineering Golden Path, or any golden path, is demanding and challenging. The standards here are high because this content affects and reflects the quality of our engineering culture. As a result, everyone involved with this project would like to thank you, the reader, for your learning efforts and feedback. Also, let's take a moment to recognize the DataEx squad and the Amplify technical writers for their time and ongoing dedication to this project.</p>"},{"location":"tutorial/welcome/","title":"Introduction and Welcome","text":"<p>Hello friends! Welcome to an early version of the revised Data Engineering Golden Path. The concepts, examples, and lessons in this tutorial will teach you how to publish a production-grade data endpoint via a batch data workflow (pipeline).</p>  <p>Alpha release</p> <p>This tutorial is in alpha and subject to change after user testing. It is designed as an eventual replacement for the batch workflow content in the Data Engineering Golden Path. Currently, this release excludes some topics that would bring it to parity with that golden path. These include:</p> <ul> <li>Counters</li> <li>Reading from and writing to BigQuery</li> <li>ITGC</li> </ul>   What is a golden path? <p>A golden path tutorial introduces you to a topic and our company-specific ways to do something. It is not the full documentation for a particular subject. Instead, a golden path touches briefly on each tool and task, and does just enough to establish the basic, opinionated, and optimal way of working.</p>"},{"location":"tutorial/welcome/#who-should-use-this-tutorial","title":"Who should use this tutorial","text":"<p>This tutorial is designed for:</p> <ul> <li> <p>New engineers who need to get up to speed with concepts and ways of working with batch data workflows.</p> </li> <li> <p>Employees changing roles within the company and who need to create and manage batch data workflows.</p> </li> <li> <p>Anyone looking for information on how to create and manage batch data workflows or who are curious about how it all works. </p> </li> </ul>"},{"location":"tutorial/welcome/#how-to-use-this-tutorial","title":"How to use this tutorial","text":"<ul> <li> <p>New engineers should start at the beginning and work sequentially through each part and lesson to the end.</p> </li> <li> <p>Engineers with experience building workflows are also encouraged to follow the same beginning-to-end sequence as new engineers. If you have previous knowledge, then a more targeted approach might suit your learning style and experience, but we encourage you to work through this tutorial systematically.</p> </li> </ul> <p>As you work through the Data Engineering Shiny Path, keep in mind that it introduces you to our data tooling. Again, this isn't the full documentation for those tools. This is just enough to get you started.</p>  <p>Note</p> <p>Each section in this shiny path builds upon the concepts and lessons learned in the previous sections. Skipping lessons might mean you're bypassing critical information or the required part of a learning exercise that spans multiple sections.</p>"},{"location":"tutorial/welcome/#contribute","title":"Contribute","text":"<p>Open a GHE issue to leave feedback or report an error. We appreciate your input and rely on the community to help us fix confusing or inaccurate content.</p> <p>Our GHE repository is LINK TO GHE REPO HERE.</p>"},{"location":"tutorial/welcome/#help-and-support","title":"Help and support","text":"<p>BOILERPLATE HELP TEXT TBD HERE.</p>"}]}