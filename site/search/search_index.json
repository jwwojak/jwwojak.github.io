{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Hi and welcome. My name is Joe Wojak. I'm a technical writer in NYC. This site contains my resume and technical writing guide. Warning This work is in alpha. Pages may be blank or incomplete. Some links may not work. We're making changes daily. Next steps Resume: Start here for information about my work experience. Writing guide: Start here for information and advice about technical writing. Thanks for stopping by.","title":"Welcome"},{"location":"#welcome","text":"Hi and welcome. My name is Joe Wojak. I'm a technical writer in NYC. This site contains my resume and technical writing guide. Warning This work is in alpha. Pages may be blank or incomplete. Some links may not work. We're making changes daily.","title":"Welcome"},{"location":"#next-steps","text":"Resume: Start here for information about my work experience. Writing guide: Start here for information and advice about technical writing. Thanks for stopping by.","title":"Next steps"},{"location":"guide/intro/","text":"Introduction There are three rules for writing . . . Unfortunately, no one knows what they are. \u2014 Somerset Maugham Hello world Welcome to the Technical Writing Guide . The Guide is designed to help engineers with rules and advice for writing technical documentation. The underlying philosophy is to treat documentation like code and keep content with the code. This means a writing system should use a simple language like Markdown and use a development environments engineers are familiar with (e.g., Visual Studio and GitHub). I hope the information in this guide helps you write documentation that's confident, clear, accurate, and authoritative. Why write documentation Writing good documentation is essential. It helps everyone in your organization understand and use the services and systems that you create. But, sometimes writing is a difficult, intimidating, and tedious activity. Maybe you're unsure about what to include, exclude, or how to organize written content. As a result, we've created this guide. It can help you understand how to write, organize content, and resolve common technical writing issues. Next steps See doc type section and org sections and style sections TBD Make improvements and report errors Everyone is welcome to to leave feedback or report errors. Feel free to open an issue or pull request on GitHub. Our repo is jwwojak.github.io .","title":"Introduction"},{"location":"guide/intro/#introduction","text":"There are three rules for writing . . . Unfortunately, no one knows what they are. \u2014 Somerset Maugham","title":"Introduction"},{"location":"guide/intro/#hello-world","text":"Welcome to the Technical Writing Guide . The Guide is designed to help engineers with rules and advice for writing technical documentation. The underlying philosophy is to treat documentation like code and keep content with the code. This means a writing system should use a simple language like Markdown and use a development environments engineers are familiar with (e.g., Visual Studio and GitHub). I hope the information in this guide helps you write documentation that's confident, clear, accurate, and authoritative.","title":"Hello world"},{"location":"guide/intro/#why-write-documentation","text":"Writing good documentation is essential. It helps everyone in your organization understand and use the services and systems that you create. But, sometimes writing is a difficult, intimidating, and tedious activity. Maybe you're unsure about what to include, exclude, or how to organize written content. As a result, we've created this guide. It can help you understand how to write, organize content, and resolve common technical writing issues.","title":"Why write documentation"},{"location":"guide/intro/#next-steps","text":"See doc type section and org sections and style sections TBD","title":"Next steps"},{"location":"guide/intro/#make-improvements-and-report-errors","text":"Everyone is welcome to to leave feedback or report errors. Feel free to open an issue or pull request on GitHub. Our repo is jwwojak.github.io .","title":"Make improvements and report errors"},{"location":"guide/types/concepts/","text":"Concept Documentation Concept documentation explains and describes. For example, you might write a concept piece to explain an idea at a high level or describe why your team created a particular system. Conceptual content can also include detailed information or a strategic analysis of a product or service. Write concept docs to tell readers why you created something rather than how to use it. Features Common features of concept documentation include: Descriptive titles LINK TBD that suggest or summarize the main topics. Sections of related content separated by informative headers LINK TBD. Notes, tips, warnings, and other callouts LINK TBD that focus attention on important items. Numbered or bulleted lists that do not enumerate procedures or task steps. Tables Images and diagrams Code samples Style advice Write concept documentation in the present tense and use the active voice . This style is ideal for expressing facts and helps make writing authoritative. Content that is accurate and frank builds user trust in your documentation and products. Additionally, present-tense writing imparts a \u201ctimeless\u201d quality to your documentation. Timelessness is important because you don\u2019t want documentation to read as stale or dated as time passes. For example, even if the code underlying a system changes, the purpose of a system may remain the same. With the present tense, your content remains valid and accurate even after you refactor code. Save yourself from future work. Write in the present tense. What to avoid Conceptual documentation shouldn't contain tasks, procedural steps, or reference information. Task and reference content are separate topic types. Documentation for these topics follow a different set of standards.","title":"Concept Documentation"},{"location":"guide/types/concepts/#concept-documentation","text":"Concept documentation explains and describes. For example, you might write a concept piece to explain an idea at a high level or describe why your team created a particular system. Conceptual content can also include detailed information or a strategic analysis of a product or service. Write concept docs to tell readers why you created something rather than how to use it.","title":"Concept Documentation"},{"location":"guide/types/concepts/#features","text":"Common features of concept documentation include: Descriptive titles LINK TBD that suggest or summarize the main topics. Sections of related content separated by informative headers LINK TBD. Notes, tips, warnings, and other callouts LINK TBD that focus attention on important items. Numbered or bulleted lists that do not enumerate procedures or task steps. Tables Images and diagrams Code samples","title":"Features"},{"location":"guide/types/concepts/#style-advice","text":"Write concept documentation in the present tense and use the active voice . This style is ideal for expressing facts and helps make writing authoritative. Content that is accurate and frank builds user trust in your documentation and products. Additionally, present-tense writing imparts a \u201ctimeless\u201d quality to your documentation. Timelessness is important because you don\u2019t want documentation to read as stale or dated as time passes. For example, even if the code underlying a system changes, the purpose of a system may remain the same. With the present tense, your content remains valid and accurate even after you refactor code. Save yourself from future work. Write in the present tense.","title":"Style advice"},{"location":"guide/types/concepts/#what-to-avoid","text":"Conceptual documentation shouldn't contain tasks, procedural steps, or reference information. Task and reference content are separate topic types. Documentation for these topics follow a different set of standards.","title":"What to avoid"},{"location":"guide/types/reference/","text":"Reference Documentation Reference documentation explains, lists, and describes or defines features like buttons, menu options, code, dataset fields, API functions, and architectural decision records (ADRs). You write reference documents to define and describe individual components of a product or system. Features Common features of a reference document include: Descriptive titles that suggest or summarize the main topics. A multi-column table that lists terms and their corresponding definitions. A basic, 2-column term and definition layout is sufficient. Style advice Keep your reference docs simple. Written content should consist mainly of a term and its related definition. Tables are great for reference material. When defining dataset fields or code, use formatting that gives each term a code-like appearance and use plain text definitions. If you're not writing about code, just use plain text. What to avoid Long-form conceptual content or task topics don't belong in a reference document. Link to those documents rather than stuffing unrelated information in a reference document. Try to keep table columns to a minimum. If you need more than 3 or 4 columns, think about combining that content or using another layout.","title":"Reference Documentation"},{"location":"guide/types/reference/#reference-documentation","text":"Reference documentation explains, lists, and describes or defines features like buttons, menu options, code, dataset fields, API functions, and architectural decision records (ADRs). You write reference documents to define and describe individual components of a product or system.","title":"Reference Documentation"},{"location":"guide/types/reference/#features","text":"Common features of a reference document include: Descriptive titles that suggest or summarize the main topics. A multi-column table that lists terms and their corresponding definitions. A basic, 2-column term and definition layout is sufficient.","title":"Features"},{"location":"guide/types/reference/#style-advice","text":"Keep your reference docs simple. Written content should consist mainly of a term and its related definition. Tables are great for reference material. When defining dataset fields or code, use formatting that gives each term a code-like appearance and use plain text definitions. If you're not writing about code, just use plain text.","title":"Style advice"},{"location":"guide/types/reference/#what-to-avoid","text":"Long-form conceptual content or task topics don't belong in a reference document. Link to those documents rather than stuffing unrelated information in a reference document. Try to keep table columns to a minimum. If you need more than 3 or 4 columns, think about combining that content or using another layout.","title":"What to avoid"},{"location":"guide/types/tasks_complex/","text":"Task Documentation for Complex Procedures Complex procedures are tasks that require, say, 6 (or more) steps to complete. And, similar to writing about simple tasks , you explain how to use something rather than why you created it. Examples For tasks that require a lot of steps, organize the instructions into short sections and restart the step numbers in each new section. Here's an example of how to write a long, complex task document. Features Task documentation for long, complex procedures includes the same textual components as a simple task documents. These include: Separating steps into related sections. Numbered steps (if steps must be completed sequentially). Restart the numbering in each section. Bulleted steps (if steps don't need to follow in sequential order). Step options and step results. Images. Style advice Group related sets of steps together. For example, maybe your process begins with steps that require you to name and describe something. Later steps may require connecting to data sets or identifying external customers. Organize related steps into their own sections and identify that part of the process with a logical section header. See also, the style advice in Documentation for Simple Procedures .","title":"Documentation for Complex Procedures"},{"location":"guide/types/tasks_complex/#task-documentation-for-complex-procedures","text":"Complex procedures are tasks that require, say, 6 (or more) steps to complete. And, similar to writing about simple tasks , you explain how to use something rather than why you created it.","title":"Task Documentation for Complex Procedures"},{"location":"guide/types/tasks_complex/#examples","text":"For tasks that require a lot of steps, organize the instructions into short sections and restart the step numbers in each new section. Here's an example of how to write a long, complex task document.","title":"Examples"},{"location":"guide/types/tasks_complex/#features","text":"Task documentation for long, complex procedures includes the same textual components as a simple task documents. These include: Separating steps into related sections. Numbered steps (if steps must be completed sequentially). Restart the numbering in each section. Bulleted steps (if steps don't need to follow in sequential order). Step options and step results. Images.","title":"Features"},{"location":"guide/types/tasks_complex/#style-advice","text":"Group related sets of steps together. For example, maybe your process begins with steps that require you to name and describe something. Later steps may require connecting to data sets or identifying external customers. Organize related steps into their own sections and identify that part of the process with a logical section header. See also, the style advice in Documentation for Simple Procedures .","title":"Style advice"},{"location":"guide/types/tasks_simple/","text":"Documentation for Simple Procedures Task documentation shows readers how to do something. It breaks down a workflow into the sequential or non-sequential steps required to complete a process. Write task docs to explain how to use the thing you built rather than why you created it. Structure This diagram shows how to organize a simple task document: Describing each step in a task is essential. This includes obvious steps like \"Click Save .\" Simple actions might not be self-evident, or require a separate step, so you need to include them. For your readers, few things are more maddening than vague or incomplete instructions. You just gotta do it. Features Common features of task documentation include: Descriptive titles that suggest or summarize the main topic. Numbered steps (if steps must be completed sequentially). Bold text for UI elements that you interact with. See the section on Bold Text LINK TBD. Bulleted steps (if steps don't need to follow in sequential order). The text \" (Optional) \" at the beginning of a step to indicate that it isn't required. Images. Separate sections to break up long procedures. See also Documentation for Complex Procedures . Style advice When writing task documentation: Start the document title with a verb that matches the procedure (e.g., Create, Build, Configure, Implement, etc.). This indicates the document's type (task) and content (steps on how to do something). Start the procedure right away. Avoid long introductions or overviews (use a concept page for that). It is OK to note task pre- and post-requisites or provide context, but try to start the task steps quickly. Start each step using a verb in the imperative mood . For example, \"Click this,\" \"Select that,\" \"Choose X.\" Procedural steps are commands, not requests. Link to other docs that describe step options or strategies. You can list the options (try bullets), but don't clutter up instructions with extensive explanations. Put that information in a separate document. Follow the advice in Writing About UI Controls LINK TBD when describing user interactions with UI features. What to avoid Don't start your task doc with a long introduction or \"overview\" content. Put this information in a separate concept document . Remember, your users read task documents to complete a process. They want instructions. Don't bury the steps under a long introduction.","title":"Documentation for Simple Procedures"},{"location":"guide/types/tasks_simple/#documentation-for-simple-procedures","text":"Task documentation shows readers how to do something. It breaks down a workflow into the sequential or non-sequential steps required to complete a process. Write task docs to explain how to use the thing you built rather than why you created it.","title":"Documentation for Simple Procedures"},{"location":"guide/types/tasks_simple/#structure","text":"This diagram shows how to organize a simple task document: Describing each step in a task is essential. This includes obvious steps like \"Click Save .\" Simple actions might not be self-evident, or require a separate step, so you need to include them. For your readers, few things are more maddening than vague or incomplete instructions. You just gotta do it.","title":"Structure"},{"location":"guide/types/tasks_simple/#features","text":"Common features of task documentation include: Descriptive titles that suggest or summarize the main topic. Numbered steps (if steps must be completed sequentially). Bold text for UI elements that you interact with. See the section on Bold Text LINK TBD. Bulleted steps (if steps don't need to follow in sequential order). The text \" (Optional) \" at the beginning of a step to indicate that it isn't required. Images. Separate sections to break up long procedures. See also Documentation for Complex Procedures .","title":"Features"},{"location":"guide/types/tasks_simple/#style-advice","text":"When writing task documentation: Start the document title with a verb that matches the procedure (e.g., Create, Build, Configure, Implement, etc.). This indicates the document's type (task) and content (steps on how to do something). Start the procedure right away. Avoid long introductions or overviews (use a concept page for that). It is OK to note task pre- and post-requisites or provide context, but try to start the task steps quickly. Start each step using a verb in the imperative mood . For example, \"Click this,\" \"Select that,\" \"Choose X.\" Procedural steps are commands, not requests. Link to other docs that describe step options or strategies. You can list the options (try bullets), but don't clutter up instructions with extensive explanations. Put that information in a separate document. Follow the advice in Writing About UI Controls LINK TBD when describing user interactions with UI features.","title":"Style advice"},{"location":"guide/types/tasks_simple/#what-to-avoid","text":"Don't start your task doc with a long introduction or \"overview\" content. Put this information in a separate concept document . Remember, your users read task documents to complete a process. They want instructions. Don't bury the steps under a long introduction.","title":"What to avoid"},{"location":"guide/types/types_intro/","text":"Topic-Based Writing and Document Types Topic-based writing reduces documentation for complex systems, processes, or workflows into discrete content categories or types. With a topic-based approach, each page covers a single topic only (1 page = 1 topic). Topic types You can organize documentation into 4 main topic types. Types and contents Each topic type contains specific information that the others don't. Excluding content based on topic helps you write because you don\u2019t have to include everything in one long article. Let\u2019s review the basic characteristics of each type. Type Contents Concept Concept documents explain ideas and describe how things work. Think of a concept piece as a deep, substantial, and informative discussion with your colleagues. A concept document doesn't contain task steps or procedures. See Concept Documentation for writing advice and examples. Task Task documents provide step-by-step instructions that show you how to complete a procedure. They organize content into ordered or unordered lists. A task document doesn't include long blocks of conceptual information. See Documenting Simple Procedures or Task Documentation for Complex Procedures for writing advice and examples. Reference Reference documents list and define or describe things (e.g., UI features, dataset fields, glossary terms, API methods, FAQs, ADRs . These are hybrid documents because they can include information found in the other document types. See Reference Documentation for writing advice and examples. Tutorials Tutorials are a mixed document type. They can include the information found in all the other document types. This guide does not cover tutorials. Help and support Placeholder for generic help text and links.","title":"Topic-Based Writing and Documentation Types"},{"location":"guide/types/types_intro/#topic-based-writing-and-document-types","text":"Topic-based writing reduces documentation for complex systems, processes, or workflows into discrete content categories or types. With a topic-based approach, each page covers a single topic only (1 page = 1 topic).","title":"Topic-Based Writing and Document Types"},{"location":"guide/types/types_intro/#topic-types","text":"You can organize documentation into 4 main topic types.","title":"Topic types"},{"location":"guide/types/types_intro/#types-and-contents","text":"Each topic type contains specific information that the others don't. Excluding content based on topic helps you write because you don\u2019t have to include everything in one long article. Let\u2019s review the basic characteristics of each type. Type Contents Concept Concept documents explain ideas and describe how things work. Think of a concept piece as a deep, substantial, and informative discussion with your colleagues. A concept document doesn't contain task steps or procedures. See Concept Documentation for writing advice and examples. Task Task documents provide step-by-step instructions that show you how to complete a procedure. They organize content into ordered or unordered lists. A task document doesn't include long blocks of conceptual information. See Documenting Simple Procedures or Task Documentation for Complex Procedures for writing advice and examples. Reference Reference documents list and define or describe things (e.g., UI features, dataset fields, glossary terms, API methods, FAQs, ADRs . These are hybrid documents because they can include information found in the other document types. See Reference Documentation for writing advice and examples. Tutorials Tutorials are a mixed document type. They can include the information found in all the other document types. This guide does not cover tutorials.","title":"Types and contents"},{"location":"guide/types/types_intro/#help-and-support","text":"Placeholder for generic help text and links.","title":"Help and support"},{"location":"resume/resume/","text":"Joe Wojak About Who: I'm a technical writer experienced with creating documentation for external end-users and internal teams. I've worked at small startups and large, established companies alike. What: During my writing career, I've inherited and managed large documentation libraries and helped create new content for innovative and groundbreaking products and services. If you don't any documentation, I can write it. If you have poor or disorganized documentation, I can fix it. How: For writing, I've used a variety of tools like simple HTML editors, complex DITA authoring systems ( Oxygen and XMetaL ), and static site generators like MkDocs and GitHub Pages . My writing follows Darwin Information Typing Architecture ( DITA ) standards for technical documentation. I treat documentation like code and keep that content with the code. Experience This is a selected chronology of my work experience. Download my resume (PDF) for more information. Spotify Senior Technical Writer, 2017 - 2022 Adobe Systems (again) TBD Tapad TBD Demdex/Adobe Systems TBD Skills TBD Education Master of Arts: US History, University of Mississippi Bachelor of Arts: History, University of Missouri Military US Army, Honorable discharge. Contact Email: jwojak@gmail.com LinkedIn: www.linkedin.com/in/joewojak GitHub: jwwojak.github.io","title":"Work Experience"},{"location":"resume/resume/#joe-wojak","text":"","title":"Joe Wojak"},{"location":"resume/resume/#about","text":"Who: I'm a technical writer experienced with creating documentation for external end-users and internal teams. I've worked at small startups and large, established companies alike. What: During my writing career, I've inherited and managed large documentation libraries and helped create new content for innovative and groundbreaking products and services. If you don't any documentation, I can write it. If you have poor or disorganized documentation, I can fix it. How: For writing, I've used a variety of tools like simple HTML editors, complex DITA authoring systems ( Oxygen and XMetaL ), and static site generators like MkDocs and GitHub Pages . My writing follows Darwin Information Typing Architecture ( DITA ) standards for technical documentation. I treat documentation like code and keep that content with the code.","title":"About"},{"location":"resume/resume/#experience","text":"This is a selected chronology of my work experience. Download my resume (PDF) for more information.","title":"Experience"},{"location":"resume/resume/#spotify","text":"Senior Technical Writer, 2017 - 2022","title":"Spotify"},{"location":"resume/resume/#adobe-systems-again","text":"TBD","title":"Adobe Systems (again)"},{"location":"resume/resume/#tapad","text":"TBD","title":"Tapad"},{"location":"resume/resume/#demdexadobe-systems","text":"TBD","title":"Demdex/Adobe Systems"},{"location":"resume/resume/#skills","text":"TBD","title":"Skills"},{"location":"resume/resume/#education","text":"Master of Arts: US History, University of Mississippi Bachelor of Arts: History, University of Missouri","title":"Education"},{"location":"resume/resume/#military","text":"US Army, Honorable discharge.","title":"Military"},{"location":"resume/resume/#contact","text":"Email: jwojak@gmail.com LinkedIn: www.linkedin.com/in/joewojak GitHub: jwwojak.github.io","title":"Contact"}]}