{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Hi and welcome. My name is Joe Wojak. I'm a technical writer in NYC. This site contains my resume and technical writing guide. Warning This work is in alpha. Pages may be blank or incomplete. Some links may not work. We're making changes daily. Next steps See Work Experience for information about me and my work experience. See the Writing Guide and Work section for examples of how I write and think about technical documentation. Thanks for stopping by.","title":"Welcome"},{"location":"#welcome","text":"Hi and welcome. My name is Joe Wojak. I'm a technical writer in NYC. This site contains my resume and technical writing guide. Warning This work is in alpha. Pages may be blank or incomplete. Some links may not work. We're making changes daily.","title":"Welcome"},{"location":"#next-steps","text":"See Work Experience for information about me and my work experience. See the Writing Guide and Work section for examples of how I write and think about technical documentation. Thanks for stopping by.","title":"Next steps"},{"location":"placeholder/","text":"Placeholder This is a temporary page. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ac lectus vel libero cursus aliquam in quis neque. Curabitur facilisis elementum sapien, eget feugiat magna consequat ut. Integer volutpat feugiat auctor. Praesent congue nunc magna, quis laoreet justo venenatis vel. Ut tortor arcu, accumsan quis rutrum sit amet, ultrices et eros. Nulla volutpat nisi diam, ut ornare neque scelerisque et. Donec malesuada, purus id fringilla consequat, ex purus imperdiet turpis, eget sagittis sapien magna tincidunt orci. Phasellus elementum dapibus metus ut aliquet.","title":"Placeholder"},{"location":"placeholder/#placeholder","text":"This is a temporary page. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ac lectus vel libero cursus aliquam in quis neque. Curabitur facilisis elementum sapien, eget feugiat magna consequat ut. Integer volutpat feugiat auctor. Praesent congue nunc magna, quis laoreet justo venenatis vel. Ut tortor arcu, accumsan quis rutrum sit amet, ultrices et eros. Nulla volutpat nisi diam, ut ornare neque scelerisque et. Donec malesuada, purus id fringilla consequat, ex purus imperdiet turpis, eget sagittis sapien magna tincidunt orci. Phasellus elementum dapibus metus ut aliquet.","title":"Placeholder"},{"location":"guide/intro/","text":"Introduction There are three rules for writing . . . Unfortunately, no one knows what they are. \u2014 Somerset Maugham Hello world Welcome to the Technical Writing Guide . The Guide is designed to help engineers with rules and advice for writing technical documentation. The underlying philosophy is to treat documentation like code and keep content with the code. This means a writing system should use a simple language like Markdown and use a development environments engineers are familiar with (e.g., Visual Studio and GitHub). I hope the information in this guide helps you write documentation that's confident, clear, accurate, and authoritative. Why write documentation Writing good documentation is essential. It helps everyone in your organization understand and use the services and systems that you create. But, sometimes writing is a difficult, intimidating, and tedious activity. Maybe you're unsure about what to include, exclude, or how to organize written content. As a result, we've created this guide. It can help you understand how to write, organize content, and resolve common technical writing issues. Secondary goals This work represents a writing sample and reflects my thoughts about how to create and organize technical documentation. It's a writing reference that's grown over the years. I've used it, in one form or another, at all the companies I've worked for. If you're an experienced technical writer, this information is not that new. Instead, this information is for less experienced content creators (e.g., engineers and developers) who need to write documentation for the systems, services, and products that they build. Next steps Here are suggestions about where to go next: Topic-Based Writing and Documentation Types : An introduction and short primer on organizing complex technical subjects into topics and specific document topic types. Organizing Sections and Pages : An outline and description of how to organize the table of contents and individual sections in your documentation space. Make improvements and report errors Everyone is welcome to to leave feedback or report errors. Feel free to open an issue or pull request on GitHub. Our repo is jwwojak.github.io .","title":"Introduction"},{"location":"guide/intro/#introduction","text":"There are three rules for writing . . . Unfortunately, no one knows what they are. \u2014 Somerset Maugham","title":"Introduction"},{"location":"guide/intro/#hello-world","text":"Welcome to the Technical Writing Guide . The Guide is designed to help engineers with rules and advice for writing technical documentation. The underlying philosophy is to treat documentation like code and keep content with the code. This means a writing system should use a simple language like Markdown and use a development environments engineers are familiar with (e.g., Visual Studio and GitHub). I hope the information in this guide helps you write documentation that's confident, clear, accurate, and authoritative.","title":"Hello world"},{"location":"guide/intro/#why-write-documentation","text":"Writing good documentation is essential. It helps everyone in your organization understand and use the services and systems that you create. But, sometimes writing is a difficult, intimidating, and tedious activity. Maybe you're unsure about what to include, exclude, or how to organize written content. As a result, we've created this guide. It can help you understand how to write, organize content, and resolve common technical writing issues. Secondary goals This work represents a writing sample and reflects my thoughts about how to create and organize technical documentation. It's a writing reference that's grown over the years. I've used it, in one form or another, at all the companies I've worked for. If you're an experienced technical writer, this information is not that new. Instead, this information is for less experienced content creators (e.g., engineers and developers) who need to write documentation for the systems, services, and products that they build.","title":"Why write documentation"},{"location":"guide/intro/#next-steps","text":"Here are suggestions about where to go next: Topic-Based Writing and Documentation Types : An introduction and short primer on organizing complex technical subjects into topics and specific document topic types. Organizing Sections and Pages : An outline and description of how to organize the table of contents and individual sections in your documentation space.","title":"Next steps"},{"location":"guide/intro/#make-improvements-and-report-errors","text":"Everyone is welcome to to leave feedback or report errors. Feel free to open an issue or pull request on GitHub. Our repo is jwwojak.github.io .","title":"Make improvements and report errors"},{"location":"guide/api/api_intro/","text":"API Documentation API descriptions should be consistent across and within methods. Flexibility and creativity are good, but we're going to be strict here. Review this section for rules and examples that can help you write clear, concise API descriptions. Style basics When writing API documentation, try to: Write in the present tense and in the active voice . Present-tense, active-voice writing is strong and confident. Start descriptions with a verb in the imperative mood (e.g., create, update, save, build, push, etc). Describe what each method does right away. Don't waste time with background content or context. Create and link to separate, but related, content when API features are too complicated to explain in a few short sentences. Description structure These recommendations follow a Swagger type structure for API development and documentation. Specific keys or parameters may not match the tools you're using, but the writing concepts presented here should be applicable across different API development platforms. First sentence The first sentence of an API description concisely describes the function of a particular method. In your text: Use the summary parameter. Add more information or links with the description parameter. Limit the main description to a single sentence only! Start with a verb in the imperative as shown in the examples below. Subsequent sentences or supporting text Supporting text provides more information and links about a method. Use the description parameter to identify this text. Example /section/section: method: summary: \"Some text here.\" description: \"Even more text here.\" Verbs for method descriptions Usually, repetition in writing is bad and tedious. In the case of API docs, repetition, or, perhaps more accurately, consistency , is your friend. As we're writing about a limited set of commands, it's good to have the description for each command start with the same word. So, try to be consistent in how you start method descriptions. Each description for a method type ( POST , GET , DELETE , PUT , etc.) should have it's own verb. Start the description with the verb that matches the method. Use a verb in the imperative like this: \"returns,\" \"deletes,\" \"creates,\" \"tests,\" etc. See the method descriptions below. If these don't work it's OK to try something else. Whatever you do, just be consistent in doing it. Verb cheat sheet These are the recommended verbs you should use to start method descriptions. See also the examples in the next section below. Method Verb GET Returns DELETE Deletes POST POST methods can do a lot of different things. Try to match the verb to the action the method performs. Here are some examples: Creates Deletes Tests Returns Moves PUT PUT methods can do a lot of different things. Try to match the verb to the action the method performs. Here are some examples: Specifies Updates Appends Description examples Here are some pseudo-code examples to help you get started. DELETE methods For single or bulk-delete methods, start the description with the word \"Delete.\" /segments/ic:{integration code}: delete: summary: \"Deletes a specific segment by integration code.\" GET methods Start the description with the word \"Returns.\" /traits/: get: summary: \"Returns data for an algorithmic, on-boarded, or rules-based trait.\" POST methods POST methods can do various things. The verbs and ways to describe these can vary, but this behavior still lends itself to writing descriptions with a fixed set of verbs and terms. Refer to these examples when writing descriptions for POST methods. Tip When writing POST descriptions, try to start with a verb that most closely describes what the method does. Create example /traits/: post: summary: \"Creates a trait that defines part of an audience segment.\" Bulk delete example /segments/bulk-delete: post: summary: \"Deletes multiple segments with a single operation.\" Test or validate /traits/validate: post: summary: \"Tests the rule logic applied to a rules-based trait.\" Return data //The POST method returns data like a GET method. /segments/estimate-size: post: summary: \"Returns the total estimated segment size for 7-, 30-, and 60-day intervals.\" Moving objects /segments/bulk-replace: post: summary: \"Moves audiences in bulk from one segment to another.\" PUT methods PUT methods can do a variety of things like POST methods. The verbs and ways to describe these can vary, but this behavior still lends itself to writing descriptions with a fixed set of verbs and terms. Refer to these examples when writing descriptions for PUT methods. Tip When writing PUT descriptions, try to start with a verb that most closely describes what the method does. Select or specify /folders/audiences/{folderId}: put: summary: \"Specifies a an audience folder ID to update with a new name, description, or move it to another location.\" Update or revise /audience/{aid}: put: summary: \"Updates a specific audince by audience ID.\" /segments/ic:{integration code}: put: summary: \"Appends an integration code to a request to revise the audience name or description.\"","title":"API Documentation"},{"location":"guide/api/api_intro/#api-documentation","text":"API descriptions should be consistent across and within methods. Flexibility and creativity are good, but we're going to be strict here. Review this section for rules and examples that can help you write clear, concise API descriptions.","title":"API Documentation"},{"location":"guide/api/api_intro/#style-basics","text":"When writing API documentation, try to: Write in the present tense and in the active voice . Present-tense, active-voice writing is strong and confident. Start descriptions with a verb in the imperative mood (e.g., create, update, save, build, push, etc). Describe what each method does right away. Don't waste time with background content or context. Create and link to separate, but related, content when API features are too complicated to explain in a few short sentences.","title":"Style basics"},{"location":"guide/api/api_intro/#description-structure","text":"These recommendations follow a Swagger type structure for API development and documentation. Specific keys or parameters may not match the tools you're using, but the writing concepts presented here should be applicable across different API development platforms.","title":"Description structure"},{"location":"guide/api/api_intro/#first-sentence","text":"The first sentence of an API description concisely describes the function of a particular method. In your text: Use the summary parameter. Add more information or links with the description parameter. Limit the main description to a single sentence only! Start with a verb in the imperative as shown in the examples below.","title":"First sentence"},{"location":"guide/api/api_intro/#subsequent-sentences-or-supporting-text","text":"Supporting text provides more information and links about a method. Use the description parameter to identify this text.","title":"Subsequent sentences or supporting text"},{"location":"guide/api/api_intro/#example","text":"/section/section: method: summary: \"Some text here.\" description: \"Even more text here.\"","title":"Example"},{"location":"guide/api/api_intro/#verbs-for-method-descriptions","text":"Usually, repetition in writing is bad and tedious. In the case of API docs, repetition, or, perhaps more accurately, consistency , is your friend. As we're writing about a limited set of commands, it's good to have the description for each command start with the same word. So, try to be consistent in how you start method descriptions. Each description for a method type ( POST , GET , DELETE , PUT , etc.) should have it's own verb. Start the description with the verb that matches the method. Use a verb in the imperative like this: \"returns,\" \"deletes,\" \"creates,\" \"tests,\" etc. See the method descriptions below. If these don't work it's OK to try something else. Whatever you do, just be consistent in doing it.","title":"Verbs for method descriptions"},{"location":"guide/api/api_intro/#verb-cheat-sheet","text":"These are the recommended verbs you should use to start method descriptions. See also the examples in the next section below. Method Verb GET Returns DELETE Deletes POST POST methods can do a lot of different things. Try to match the verb to the action the method performs. Here are some examples: Creates Deletes Tests Returns Moves PUT PUT methods can do a lot of different things. Try to match the verb to the action the method performs. Here are some examples: Specifies Updates Appends","title":"Verb cheat sheet"},{"location":"guide/api/api_intro/#description-examples","text":"Here are some pseudo-code examples to help you get started.","title":"Description examples"},{"location":"guide/api/api_intro/#delete-methods","text":"For single or bulk-delete methods, start the description with the word \"Delete.\" /segments/ic:{integration code}: delete: summary: \"Deletes a specific segment by integration code.\"","title":"DELETE methods"},{"location":"guide/api/api_intro/#get-methods","text":"Start the description with the word \"Returns.\" /traits/: get: summary: \"Returns data for an algorithmic, on-boarded, or rules-based trait.\"","title":"GET methods"},{"location":"guide/api/api_intro/#post-methods","text":"POST methods can do various things. The verbs and ways to describe these can vary, but this behavior still lends itself to writing descriptions with a fixed set of verbs and terms. Refer to these examples when writing descriptions for POST methods. Tip When writing POST descriptions, try to start with a verb that most closely describes what the method does. Create example /traits/: post: summary: \"Creates a trait that defines part of an audience segment.\" Bulk delete example /segments/bulk-delete: post: summary: \"Deletes multiple segments with a single operation.\" Test or validate /traits/validate: post: summary: \"Tests the rule logic applied to a rules-based trait.\" Return data //The POST method returns data like a GET method. /segments/estimate-size: post: summary: \"Returns the total estimated segment size for 7-, 30-, and 60-day intervals.\" Moving objects /segments/bulk-replace: post: summary: \"Moves audiences in bulk from one segment to another.\"","title":"POST methods"},{"location":"guide/api/api_intro/#put-methods","text":"PUT methods can do a variety of things like POST methods. The verbs and ways to describe these can vary, but this behavior still lends itself to writing descriptions with a fixed set of verbs and terms. Refer to these examples when writing descriptions for PUT methods. Tip When writing PUT descriptions, try to start with a verb that most closely describes what the method does. Select or specify /folders/audiences/{folderId}: put: summary: \"Specifies a an audience folder ID to update with a new name, description, or move it to another location.\" Update or revise /audience/{aid}: put: summary: \"Updates a specific audince by audience ID.\" /segments/ic:{integration code}: put: summary: \"Appends an integration code to a request to revise the audience name or description.\"","title":"PUT methods"},{"location":"guide/cli/cli/","text":"Command Line Documentation The command line interface (CLI) is a text-based application that lets you control a computer operating system, run programs, navigate files and directories, and manipulate files. Windows machines have 2 CLIs, the legacy Command Shell and the newer PowerShell . For Mac users, the Terminal is your CLI. Regardless of operating system, the CLI is a simple and powerful tool. Writing about CLI commands Good CLI documentation should contain: The command's name A clear and concise definition or description Syntax Optional arguments Examples Syntax basics Name Symbol Description Curly brackets { } Delimits a set of mutually exclusive arguments when one of the arguments is required. If the arguments are optional, they are enclosed in brackets ([ ]). Ellipsis . . . Indicates that you can specify multiple values for the previous argument. Pipe | Indicates mutually exclusive information similar to a Boolean OR. You can use the argument to the left of the separator or the argument to the right of the separator. You cannot use both arguments in a single use of the command. Square brackets [ ] Identifies an optional argument. Arguments not enclosed in brackets are required. CLI reference CLI documentation is ubiquitous. As a result, we encourage you to examine Documenting Command Line Syntax in the Google developer style guide. You won't go astray by following their style.","title":"Command Line Documentation"},{"location":"guide/cli/cli/#command-line-documentation","text":"The command line interface (CLI) is a text-based application that lets you control a computer operating system, run programs, navigate files and directories, and manipulate files. Windows machines have 2 CLIs, the legacy Command Shell and the newer PowerShell . For Mac users, the Terminal is your CLI. Regardless of operating system, the CLI is a simple and powerful tool.","title":"Command Line Documentation"},{"location":"guide/cli/cli/#writing-about-cli-commands","text":"Good CLI documentation should contain: The command's name A clear and concise definition or description Syntax Optional arguments Examples","title":"Writing about CLI commands"},{"location":"guide/cli/cli/#syntax-basics","text":"Name Symbol Description Curly brackets { } Delimits a set of mutually exclusive arguments when one of the arguments is required. If the arguments are optional, they are enclosed in brackets ([ ]). Ellipsis . . . Indicates that you can specify multiple values for the previous argument. Pipe | Indicates mutually exclusive information similar to a Boolean OR. You can use the argument to the left of the separator or the argument to the right of the separator. You cannot use both arguments in a single use of the command. Square brackets [ ] Identifies an optional argument. Arguments not enclosed in brackets are required.","title":"Syntax basics"},{"location":"guide/cli/cli/#cli-reference","text":"CLI documentation is ubiquitous. As a result, we encourage you to examine Documenting Command Line Syntax in the Google developer style guide. You won't go astray by following their style.","title":"CLI reference"},{"location":"guide/organization/home_code/","text":"Homepage Code Template This is a sample homepage formatted in Markdown. It includes dummy links and Latin filler text. Feel free to copy this template to your preferred code editor and modify it to create your own docs homepage. Markdown code # Page Title <!--- Short welcome or summary description here.--> Welcome to the documentation for <insert name of thing here>. Make this your one-stop shop for getting started, explanations of our system, and for help and support. The <insert team/squad name here> manages this service and documentation. ## Overview section <!--- Brief summary of your service here. Link to another page if it needs a longer explanation. ---> In eget auctor sem. Ut feugiat eu risus quis vehicula. Vestibulum suscipit eleifend eleifend. Pellentesque vel metus ullamcorper dolor facilisis tristique a quis dui. Sed vitae malesuada quam. Pellentesque laoreet vel orci eget ornare. Ut quis nisl dui. Sed mattis dictum massa. Morbi semper mattis viverra. In hac habitasse platea dictumst. Pellentesque quis metus ac est tempor congue. For more information, see [ Understanding Name of Thing Here ]( name-of-file.md ). ## Next steps <!-- Guide your readers with recommendations. --> Here's some recommended readings to help you get started with our service: - See the [ Getting Started section ]( fake-link.md ) for prerequisites and instructions. - New users should read the [ Overview of Foo ]( fake-link2.md ) for more information about our system. - Experienced users may want to review [ Some link here ]( fake-link3.md ). ## Contribute <!--- Optional. Tell readers how they can help with your docs or service/code ---> We're always looking for help from our peers and the larger Spotify community. If you have a feature suggestion or want to help improve our code, curabitur interdum sapien ut purus malesuada, vulputate mollis tellus aliquet. Aenean pharetra ultrices neque, ut placerat purus luctus ac. In et semper nisi, eu tristique dui. Our GHE repo is _linked name of repo here_ . ## Help and support <!--- Contact info ---> The <insert squad name here> manages the Foo system. Reach out to us here if you need help or have questions: - Drop us a note in Slack at <#channel name here>. - Our group email is <email address here>. - Post a question or search for answers on Stack Overflow. Use \" _name of thing here_ \" as your Stack tag for questions or searches. ## Related topics <!--- Optional. Links to other relevant internal or external documentation. ---> - [ Some Doc About This Topic ]( link-here.md ) - [ Another Doc About This Topic ]( url here ) - [ Related Blog Post ]( http://another.link.com ) And that's it. Stop writing and end the doc when you're done. Tips Identity : When you first mention the name your team or squad, link that text to your team's space, page, or any other resource that explains who you are and what you do. Stack Overflow : If you encourage readers to ask questions in Stack Overflow, provide some descriptive text that links to Stack and includes code that auto-populates the tag field (e.g. https://company_name.stackenterprise.co/questions/ask?tags=<insert tag here> ).","title":"Homepage Code Template"},{"location":"guide/organization/home_code/#homepage-code-template","text":"This is a sample homepage formatted in Markdown. It includes dummy links and Latin filler text. Feel free to copy this template to your preferred code editor and modify it to create your own docs homepage.","title":"Homepage Code Template"},{"location":"guide/organization/home_code/#markdown-code","text":"# Page Title <!--- Short welcome or summary description here.--> Welcome to the documentation for <insert name of thing here>. Make this your one-stop shop for getting started, explanations of our system, and for help and support. The <insert team/squad name here> manages this service and documentation. ## Overview section <!--- Brief summary of your service here. Link to another page if it needs a longer explanation. ---> In eget auctor sem. Ut feugiat eu risus quis vehicula. Vestibulum suscipit eleifend eleifend. Pellentesque vel metus ullamcorper dolor facilisis tristique a quis dui. Sed vitae malesuada quam. Pellentesque laoreet vel orci eget ornare. Ut quis nisl dui. Sed mattis dictum massa. Morbi semper mattis viverra. In hac habitasse platea dictumst. Pellentesque quis metus ac est tempor congue. For more information, see [ Understanding Name of Thing Here ]( name-of-file.md ). ## Next steps <!-- Guide your readers with recommendations. --> Here's some recommended readings to help you get started with our service: - See the [ Getting Started section ]( fake-link.md ) for prerequisites and instructions. - New users should read the [ Overview of Foo ]( fake-link2.md ) for more information about our system. - Experienced users may want to review [ Some link here ]( fake-link3.md ). ## Contribute <!--- Optional. Tell readers how they can help with your docs or service/code ---> We're always looking for help from our peers and the larger Spotify community. If you have a feature suggestion or want to help improve our code, curabitur interdum sapien ut purus malesuada, vulputate mollis tellus aliquet. Aenean pharetra ultrices neque, ut placerat purus luctus ac. In et semper nisi, eu tristique dui. Our GHE repo is _linked name of repo here_ . ## Help and support <!--- Contact info ---> The <insert squad name here> manages the Foo system. Reach out to us here if you need help or have questions: - Drop us a note in Slack at <#channel name here>. - Our group email is <email address here>. - Post a question or search for answers on Stack Overflow. Use \" _name of thing here_ \" as your Stack tag for questions or searches. ## Related topics <!--- Optional. Links to other relevant internal or external documentation. ---> - [ Some Doc About This Topic ]( link-here.md ) - [ Another Doc About This Topic ]( url here ) - [ Related Blog Post ]( http://another.link.com ) And that's it. Stop writing and end the doc when you're done.","title":"Markdown code"},{"location":"guide/organization/home_code/#tips","text":"Identity : When you first mention the name your team or squad, link that text to your team's space, page, or any other resource that explains who you are and what you do. Stack Overflow : If you encourage readers to ask questions in Stack Overflow, provide some descriptive text that links to Stack and includes code that auto-populates the tag field (e.g. https://company_name.stackenterprise.co/questions/ask?tags=<insert tag here> ).","title":"Tips"},{"location":"guide/organization/home_outline/","text":"Homepage Outline and Section Summaries Here\u2019s an outline you can follow to create a basic documentation homepage. It tries to meet the goals discussed in Homepage Theory and Purpose . Take a moment to review that article if you haven't read it yet. Sections outlined This outline shows you how to organize the major sections of your documentation homepage. I. Page title A. Introduction or short description II. Summary III. Next steps IV. Contribute (optional) V. Help and support section VI. Related topics (optional) Except for the introduction/short description, you can use the outline headers as the titles of each section. Tip For a visual overview, see the Homepage Quick Reference . Sections described Let\u2019s take a look at the typical contents and formatting of each section in a homepage. Page title A homepage title should include or suggest the name of your service, feature, or whatever it is you\u2019re writing about. Good page tiles help readers determine if a page or section contains the information they're looking for. Here are some examples: Implementing Apollo Services Working With gRPC Pipeline Orchestration With Flyte Introduction section The introduction or short description immediately follows the page title. It should welcome the reader to your docs site and/or briefly summarize your service or page contents. Don\u2019t try to write a complete explanation of your whole system in the introduction. Save that longer discussion for the summary section or another page. Style elements for an introduction section include: Using an H1 # title case title for page titles (e.g. # Implementing Apollo Services ). No section title. Let the page title start the short description. Just write your text. Complete, grammatically correct sentences. Summary section The summary section should contain 1-3 paragraphs that provide just enough information to describe your service. If you don't use a summary on the homepage and still want to describe your service, put that text in a separate overview section. Use an H2 ## sentence case title for the section headers. Text like ## Summary or ## Service overview are good examples of section titles. Next steps section What do you do after the introduction and summary? Well, you and your team are the subject matter experts. Put that knowledge to work and provide some recommendations for your readers. The \"Next steps\" section is your opportunity to guide people to information that you think is important. For instance: New users may want to know how to implement your system or how it works. In this case, referring them to getting started or overview content might be helpful. Experienced users might need help with a complex issue or question. Pointing them to a user guide, FAQ, or use cases could be another helpful link in this section. Style elements for a next steps section include: Using an H2 ## sentence case title for the section header (e.g., ## Next steps ). A bullet list of links to helpful resources. Short summaries of the content you choose to highlight in this section. Contribute section The contribution section describes how your readers can help improve your documentation or report errors. It is optional. Style elements for a contribution section include: Using an H2 ## sentence case title for the section header (e.g., ## Contribute ). A sentence, paragraph, or instructions that tell readers how to report bugs, issues, or lend a hand. Help and support section After explaining to your readers who you are, what you do, and where to go next, provide contact information about the team that manages the service described in the documentation. Taking responsibility for your service documentation is essential. You wrote it, you own it. Format this section as a simple bullet list that includes things like your Slack channels, group emails, Stack Overflow, or other resources. Style elements include: Using an H2 ## sentence case title for the section header (e.g., ## Help and support ) Contact information (e.g., Slack, gmail, Stack Overflow, etc.) in a bullet list. Link to these when you can. Stack Overflow Tip If your company has its own instance of Stack Overflow, link to that resource and add code that automatically populates the Tags field with a tag related to your service (e.g. https://mycompany.stackenterprise.co/questions/ask?tags=<add tag here> ). Related topics section The related topics section comprises simple bullet list of links to other resources that are similar to the topics covered by the page you're on. Including a related topics section is a great way to connect readers with other parts of your documentation or external documentation. It optional. Style elements include: Using an H2 ## sentence case title for the section header (e.g., ## Related topics , Reference , or Further reading ). A simple bullet list of linked references. Don't use a bullet list if there's only 1 item. Just add that item under the title. Reference For more information on page formatting, see the these sections : Page and Content Structure Quick Reference LINK TBD Page Titles and Section Headers Deep Dive LINK TBD","title":"Homepage Outline and Section Summaries"},{"location":"guide/organization/home_outline/#homepage-outline-and-section-summaries","text":"Here\u2019s an outline you can follow to create a basic documentation homepage. It tries to meet the goals discussed in Homepage Theory and Purpose . Take a moment to review that article if you haven't read it yet.","title":"Homepage Outline and Section Summaries"},{"location":"guide/organization/home_outline/#sections-outlined","text":"This outline shows you how to organize the major sections of your documentation homepage. I. Page title A. Introduction or short description II. Summary III. Next steps IV. Contribute (optional) V. Help and support section VI. Related topics (optional) Except for the introduction/short description, you can use the outline headers as the titles of each section. Tip For a visual overview, see the Homepage Quick Reference .","title":"Sections outlined"},{"location":"guide/organization/home_outline/#sections-described","text":"Let\u2019s take a look at the typical contents and formatting of each section in a homepage.","title":"Sections described"},{"location":"guide/organization/home_outline/#page-title","text":"A homepage title should include or suggest the name of your service, feature, or whatever it is you\u2019re writing about. Good page tiles help readers determine if a page or section contains the information they're looking for. Here are some examples: Implementing Apollo Services Working With gRPC Pipeline Orchestration With Flyte","title":"Page title"},{"location":"guide/organization/home_outline/#introduction-section","text":"The introduction or short description immediately follows the page title. It should welcome the reader to your docs site and/or briefly summarize your service or page contents. Don\u2019t try to write a complete explanation of your whole system in the introduction. Save that longer discussion for the summary section or another page. Style elements for an introduction section include: Using an H1 # title case title for page titles (e.g. # Implementing Apollo Services ). No section title. Let the page title start the short description. Just write your text. Complete, grammatically correct sentences.","title":"Introduction section"},{"location":"guide/organization/home_outline/#summary-section","text":"The summary section should contain 1-3 paragraphs that provide just enough information to describe your service. If you don't use a summary on the homepage and still want to describe your service, put that text in a separate overview section. Use an H2 ## sentence case title for the section headers. Text like ## Summary or ## Service overview are good examples of section titles.","title":"Summary section"},{"location":"guide/organization/home_outline/#next-steps-section","text":"What do you do after the introduction and summary? Well, you and your team are the subject matter experts. Put that knowledge to work and provide some recommendations for your readers. The \"Next steps\" section is your opportunity to guide people to information that you think is important. For instance: New users may want to know how to implement your system or how it works. In this case, referring them to getting started or overview content might be helpful. Experienced users might need help with a complex issue or question. Pointing them to a user guide, FAQ, or use cases could be another helpful link in this section. Style elements for a next steps section include: Using an H2 ## sentence case title for the section header (e.g., ## Next steps ). A bullet list of links to helpful resources. Short summaries of the content you choose to highlight in this section.","title":"Next steps section"},{"location":"guide/organization/home_outline/#contribute-section","text":"The contribution section describes how your readers can help improve your documentation or report errors. It is optional. Style elements for a contribution section include: Using an H2 ## sentence case title for the section header (e.g., ## Contribute ). A sentence, paragraph, or instructions that tell readers how to report bugs, issues, or lend a hand.","title":"Contribute section"},{"location":"guide/organization/home_outline/#help-and-support-section","text":"After explaining to your readers who you are, what you do, and where to go next, provide contact information about the team that manages the service described in the documentation. Taking responsibility for your service documentation is essential. You wrote it, you own it. Format this section as a simple bullet list that includes things like your Slack channels, group emails, Stack Overflow, or other resources. Style elements include: Using an H2 ## sentence case title for the section header (e.g., ## Help and support ) Contact information (e.g., Slack, gmail, Stack Overflow, etc.) in a bullet list. Link to these when you can. Stack Overflow Tip If your company has its own instance of Stack Overflow, link to that resource and add code that automatically populates the Tags field with a tag related to your service (e.g. https://mycompany.stackenterprise.co/questions/ask?tags=<add tag here> ).","title":"Help and support section"},{"location":"guide/organization/home_outline/#related-topics-section","text":"The related topics section comprises simple bullet list of links to other resources that are similar to the topics covered by the page you're on. Including a related topics section is a great way to connect readers with other parts of your documentation or external documentation. It optional. Style elements include: Using an H2 ## sentence case title for the section header (e.g., ## Related topics , Reference , or Further reading ). A simple bullet list of linked references. Don't use a bullet list if there's only 1 item. Just add that item under the title.","title":"Related topics section"},{"location":"guide/organization/home_outline/#reference","text":"For more information on page formatting, see the these sections : Page and Content Structure Quick Reference LINK TBD Page Titles and Section Headers Deep Dive LINK TBD","title":"Reference"},{"location":"guide/organization/home_reference/","text":"Homepage Quick Reference Here's an illustration that maps the main sections of your documentation homepage. Tip See the Homepage Outline for more information about this structure and section contents.","title":"Homepage Quick Reference"},{"location":"guide/organization/home_reference/#homepage-quick-reference","text":"Here's an illustration that maps the main sections of your documentation homepage. Tip See the Homepage Outline for more information about this structure and section contents.","title":"Homepage Quick Reference"},{"location":"guide/organization/home_theory/","text":"Homepage Theory and Purpose The homepage is the main entry point for your documentation space. But it's more than just another page of documentation. In fact, the homepage is so essential that we've devoted an entire section of this guide to it. If you\u2019re stuck and aren\u2019t sure what to do, perhaps this information can get you started with a basic homepage. After reading this, we hope you learn: What type of content to include on your homepage. How to organize your homepage. How to format your homepage. You should feel free to modify this design as you become more comfortable with writing or to suit your documentation needs. Theory and purpose It might help you to think of the homepage for your docs as a space similar to the waiting area in an airport or train station. These places are filled with people passing through quickly on their way to a particular destination. As a result, the information displayed in lobby areas should be brief but informative. Help me get to where I need to go. Like a physical lobby area, your documentation homepage is also a transitional space. But, instead of flying off to a business or holiday destination, a homepage guides readers to specific pages or sections in your documentation. Your homepage isn\u2019t the destination itself. It is a page that helps readers get to their real destination, i.e., the information they need to understand a service or to complete a task. As a result, you should try to create a documentation homepage that scores a few important goals for your readers. Goals A good documentation homepage: Summarizes your system, app, or service in a concise paragraph. If you need more room to write, create and link to a separate \"Overview\" section or page from the homepage. Recommends and links to sections of your documentation or to individual articles. Be opinionated. Tell your readers if you think something is important to know because it probably is! Identifies communication channels. Tell readers who owns/manages your docs, where to ask questions or report errors, and (optionally) how to help make contributions or get involved. Next steps Enough theory! Let\u2019s try to put these ideas into practice by creating an outline that meets the minimum goals we've set for a documentation homepage. See the Homepage Outline and Section Summaries next.","title":"Homepage Theory and Purpose"},{"location":"guide/organization/home_theory/#homepage-theory-and-purpose","text":"The homepage is the main entry point for your documentation space. But it's more than just another page of documentation. In fact, the homepage is so essential that we've devoted an entire section of this guide to it. If you\u2019re stuck and aren\u2019t sure what to do, perhaps this information can get you started with a basic homepage. After reading this, we hope you learn: What type of content to include on your homepage. How to organize your homepage. How to format your homepage. You should feel free to modify this design as you become more comfortable with writing or to suit your documentation needs.","title":"Homepage Theory and Purpose"},{"location":"guide/organization/home_theory/#theory-and-purpose","text":"It might help you to think of the homepage for your docs as a space similar to the waiting area in an airport or train station. These places are filled with people passing through quickly on their way to a particular destination. As a result, the information displayed in lobby areas should be brief but informative. Help me get to where I need to go. Like a physical lobby area, your documentation homepage is also a transitional space. But, instead of flying off to a business or holiday destination, a homepage guides readers to specific pages or sections in your documentation. Your homepage isn\u2019t the destination itself. It is a page that helps readers get to their real destination, i.e., the information they need to understand a service or to complete a task. As a result, you should try to create a documentation homepage that scores a few important goals for your readers.","title":"Theory and purpose"},{"location":"guide/organization/home_theory/#goals","text":"A good documentation homepage: Summarizes your system, app, or service in a concise paragraph. If you need more room to write, create and link to a separate \"Overview\" section or page from the homepage. Recommends and links to sections of your documentation or to individual articles. Be opinionated. Tell your readers if you think something is important to know because it probably is! Identifies communication channels. Tell readers who owns/manages your docs, where to ask questions or report errors, and (optionally) how to help make contributions or get involved.","title":"Goals"},{"location":"guide/organization/home_theory/#next-steps","text":"Enough theory! Let\u2019s try to put these ideas into practice by creating an outline that meets the minimum goals we've set for a documentation homepage. See the Homepage Outline and Section Summaries next.","title":"Next steps"},{"location":"guide/organization/org_adr/","text":"ADRs As described in this blog post, \"Documenting Architecture Decisions\" , an Architectural Decision Record (ADR) logs the important changes to your code and documents the consequences of that change. When to use Add an ADR section to your documentation if you want to: Record the thinking and decision making process behind significant code or other changes. Create an archive that new squad-mates can review. We often forget (or are unaware of) how code or a system got created and how it evolved to its current state. ADR documents become the history of your project. Better historical knowledge may help you understand the past, the present, and plan for the future. Contents and organization The following table lists and defines the common sections in a typical architectural decision record. Section Description Date The date a change or decision was reached. Status Classifies the state of an architectural decision (e.g., proposed, accepted, deprecated, superseded, etc.). Context Describes the conditions, background, problems that prompted particular design decision. Decision Describes the change, update, or fix itself in response to the context. Consequences Describes the outcome of a particular decision. Location Put your ADRs at the end of your documentation, after the FAQ section if used. To organize content properly, edit your mkdocs.yml file as shown below. nav : - Home : index.md - Overview : <file-path>/<file-name.md> - Getting Started : <file-path>/<file-name.md> - . . . - FAQs : <file-path>/<file-name.md> - ADRs : <file-path>/<file-name.md> ADR introduction page Sometimes readers are not familiar with the ADR concept. As a result, it is helpful to start your ADR section with an introduction. Here's a template you can use to start an ADR section. # Introduction Maintaining a record of design decisions helps provide historical context for developers and users who work with our service. ## Design The documents in our archive follow the standards described in [ Documenting Architecture Decisions ]( https://cognitect.com/blog/2011/11/15/documenting-architecture-decisions ), an external blog post. ## Record structure The following table lists and defines the common sections in a typical architectural decision record. | Section | Description | |-----------|-------------| | **Date** | The date a change or decision was reached. | | **Status** | Classifies the state of an architectural decision (e.g., proposed, accepted, deprecated, superseded, etc.).| | **Context** | Describes the conditions, background, problems that prompted particular design decision.| | **Decision** | Describes the change, update, or fix itself in response to the context.| | **Consequences** | Describes the outcome of a particular decision.|","title":"ADRs"},{"location":"guide/organization/org_adr/#adrs","text":"As described in this blog post, \"Documenting Architecture Decisions\" , an Architectural Decision Record (ADR) logs the important changes to your code and documents the consequences of that change.","title":"ADRs"},{"location":"guide/organization/org_adr/#when-to-use","text":"Add an ADR section to your documentation if you want to: Record the thinking and decision making process behind significant code or other changes. Create an archive that new squad-mates can review. We often forget (or are unaware of) how code or a system got created and how it evolved to its current state. ADR documents become the history of your project. Better historical knowledge may help you understand the past, the present, and plan for the future.","title":"When to use"},{"location":"guide/organization/org_adr/#contents-and-organization","text":"The following table lists and defines the common sections in a typical architectural decision record. Section Description Date The date a change or decision was reached. Status Classifies the state of an architectural decision (e.g., proposed, accepted, deprecated, superseded, etc.). Context Describes the conditions, background, problems that prompted particular design decision. Decision Describes the change, update, or fix itself in response to the context. Consequences Describes the outcome of a particular decision.","title":"Contents and organization"},{"location":"guide/organization/org_adr/#location","text":"Put your ADRs at the end of your documentation, after the FAQ section if used. To organize content properly, edit your mkdocs.yml file as shown below. nav : - Home : index.md - Overview : <file-path>/<file-name.md> - Getting Started : <file-path>/<file-name.md> - . . . - FAQs : <file-path>/<file-name.md> - ADRs : <file-path>/<file-name.md>","title":"Location"},{"location":"guide/organization/org_adr/#adr-introduction-page","text":"Sometimes readers are not familiar with the ADR concept. As a result, it is helpful to start your ADR section with an introduction. Here's a template you can use to start an ADR section. # Introduction Maintaining a record of design decisions helps provide historical context for developers and users who work with our service. ## Design The documents in our archive follow the standards described in [ Documenting Architecture Decisions ]( https://cognitect.com/blog/2011/11/15/documenting-architecture-decisions ), an external blog post. ## Record structure The following table lists and defines the common sections in a typical architectural decision record. | Section | Description | |-----------|-------------| | **Date** | The date a change or decision was reached. | | **Status** | Classifies the state of an architectural decision (e.g., proposed, accepted, deprecated, superseded, etc.).| | **Context** | Describes the conditions, background, problems that prompted particular design decision.| | **Decision** | Describes the change, update, or fix itself in response to the context.| | **Consequences** | Describes the outcome of a particular decision.|","title":"ADR introduction page"},{"location":"guide/organization/org_faqs/","text":"FAQs Frequently asked questions (FAQ) provide answers to common questions. When to use Create a FAQ if you start to get a lot similar questions over and over again. Or, you could create a FAQ to anticipate possible questions. Use Stack as a FAQ Consider replacing the FAQ with Stack Overflow. For example, you could put some text on your homepage or FAQ page that encourages people to ask and answer questions on Stack Overflow. This transforms a static question and answer format into a dynamic Stack Overflow conversations with your users. For example, you could do something like this on a page: [Post a question](https://company_name.stackenterprise.co/questions/ask?tags= < insert tag here > ) or search for answers on Stack Overflow. Use \" < insert tag here > \" as your Stack tag for questions or searches. Contents and organization A FAQ consists of text arranged in a question and answer format. Format your questions as H2 or H3 headers. This makes them easy to scan and more visible than plain text. Also, TechDocs uses the headers to create a page-level table of contents that appears on the right side of the screen. Write your answers in plain text below the question. For style points, indent the answer several spaces under the question header. This makes each question/answer pair look like a unified block separate from the other entries. Location The FAQ is one of the last chapters in you'll write. It belongs at or near the end of your documentation space. To organize content properly, edit your mkdocs.yml file as shown below. nav : - Home : index.md - Overview : <file-path>/<file-name.md> - Getting Started : <file-path>/<file-name.md> - . . . - FAQs : <file-path>/<file-name.md>","title":"FAQs"},{"location":"guide/organization/org_faqs/#faqs","text":"Frequently asked questions (FAQ) provide answers to common questions.","title":"FAQs"},{"location":"guide/organization/org_faqs/#when-to-use","text":"Create a FAQ if you start to get a lot similar questions over and over again. Or, you could create a FAQ to anticipate possible questions. Use Stack as a FAQ Consider replacing the FAQ with Stack Overflow. For example, you could put some text on your homepage or FAQ page that encourages people to ask and answer questions on Stack Overflow. This transforms a static question and answer format into a dynamic Stack Overflow conversations with your users. For example, you could do something like this on a page: [Post a question](https://company_name.stackenterprise.co/questions/ask?tags= < insert tag here > ) or search for answers on Stack Overflow. Use \" < insert tag here > \" as your Stack tag for questions or searches.","title":"When to use"},{"location":"guide/organization/org_faqs/#contents-and-organization","text":"A FAQ consists of text arranged in a question and answer format. Format your questions as H2 or H3 headers. This makes them easy to scan and more visible than plain text. Also, TechDocs uses the headers to create a page-level table of contents that appears on the right side of the screen. Write your answers in plain text below the question. For style points, indent the answer several spaces under the question header. This makes each question/answer pair look like a unified block separate from the other entries.","title":"Contents and organization"},{"location":"guide/organization/org_faqs/#location","text":"The FAQ is one of the last chapters in you'll write. It belongs at or near the end of your documentation space. To organize content properly, edit your mkdocs.yml file as shown below. nav : - Home : index.md - Overview : <file-path>/<file-name.md> - Getting Started : <file-path>/<file-name.md> - . . . - FAQs : <file-path>/<file-name.md>","title":"Location"},{"location":"guide/organization/org_getting_started/","text":"Getting Started The getting started section provides information about how to start using your service. Also, make it a top-level section in your documentation, don't bury getting started information as a subsection with other content in a parent container. Make it easy for your readers to, well, get started with using your awesome feature or service. When to use Include a \"Getting Started\" section in your documentation when you have a service or system that requires a multi-step configuration process. Basically, if your users need to do step 1, 2, 3, etc. before they can use whatever it is you've built, put that information in this section. Contents and organization The getting started section should contain task documentation only. Task docs are procedures that provide step by step instructions on how to use the thing you're writing about. For information about task docs, see the Technical Writing Handbook sections on: Documentation for Simple Procedures Documentation for Complex Procedures Location A \"Getting Started\" section is the either the second or third chapter in your documentation. For example, \"Getting Started\" is: The second chapter in your docs if you don't have an Overview section. The third chapter in your docs if you do have an \"Overview\" section (place it after the \"Overview.\") To organize content properly, edit your mkdocs.yml file as shown below. # This example doesn't have an \"Overview\" section. nav : - Home : index.md - Getting Started : <file-path>/file-name.md> # This example has an \"Overview\" section. nav : - Home : index.md - Overview : <file-path>/<file-name.md> - Getting Started : <file-path>/<file-name.md> # This example uses a parent container for multiple child docs. nav : - Home : index.md - Overview : <file-path>/<file-name.md> - Getting Started : - Task 1 : <file-path>/<file-name.md> - Task 2 : <file-path>/<file-name.md> Tip For more information about the mkdocs.yml file and how it creates the TOC, see the Table of Contents Deep Dive LINK TBD .","title":"Getting Started"},{"location":"guide/organization/org_getting_started/#getting-started","text":"The getting started section provides information about how to start using your service. Also, make it a top-level section in your documentation, don't bury getting started information as a subsection with other content in a parent container. Make it easy for your readers to, well, get started with using your awesome feature or service.","title":"Getting Started"},{"location":"guide/organization/org_getting_started/#when-to-use","text":"Include a \"Getting Started\" section in your documentation when you have a service or system that requires a multi-step configuration process. Basically, if your users need to do step 1, 2, 3, etc. before they can use whatever it is you've built, put that information in this section.","title":"When to use"},{"location":"guide/organization/org_getting_started/#contents-and-organization","text":"The getting started section should contain task documentation only. Task docs are procedures that provide step by step instructions on how to use the thing you're writing about. For information about task docs, see the Technical Writing Handbook sections on: Documentation for Simple Procedures Documentation for Complex Procedures","title":"Contents and organization"},{"location":"guide/organization/org_getting_started/#location","text":"A \"Getting Started\" section is the either the second or third chapter in your documentation. For example, \"Getting Started\" is: The second chapter in your docs if you don't have an Overview section. The third chapter in your docs if you do have an \"Overview\" section (place it after the \"Overview.\") To organize content properly, edit your mkdocs.yml file as shown below. # This example doesn't have an \"Overview\" section. nav : - Home : index.md - Getting Started : <file-path>/file-name.md> # This example has an \"Overview\" section. nav : - Home : index.md - Overview : <file-path>/<file-name.md> - Getting Started : <file-path>/<file-name.md> # This example uses a parent container for multiple child docs. nav : - Home : index.md - Overview : <file-path>/<file-name.md> - Getting Started : - Task 1 : <file-path>/<file-name.md> - Task 2 : <file-path>/<file-name.md> Tip For more information about the mkdocs.yml file and how it creates the TOC, see the Table of Contents Deep Dive LINK TBD .","title":"Location"},{"location":"guide/organization/org_intro/","text":"Introduction This section of the writing guide is designed to help engineering teams organize new documentation or revise the structure of an existing content repo. Here our guide: Suggests an ideal organizational hierarchy for each of the main sections in your documentation. Lists and describes the purpose of each main section in a well-ordered documentation space. Outlines the sections and content within important individual pages in your documentation. You may have other ideas about how to organize documentation. If that\u2019s the case, fantastic! We encourage you to act on those thoughts and go for it. Let that passion and vision come out in your content organization and writing. However, we still encourage you to review this guide. Something here may help refine or improve the structure of your documentation. Next steps Here are some recommendations: Start with the Section Outline . It provides and organizational blueprint for main sections of a documentation space. Next, review Homepage Theory and Purpose . It discusses the importance of a good homepage and guides you to other documents that show you how to create an effective and helpful homepage. Finally, just browse sections that seem interesting or relevant to the documentation issues you or your team are struggling with. Help and support Placeholder for boilerplate help text.","title":"Introduction"},{"location":"guide/organization/org_intro/#introduction","text":"This section of the writing guide is designed to help engineering teams organize new documentation or revise the structure of an existing content repo. Here our guide: Suggests an ideal organizational hierarchy for each of the main sections in your documentation. Lists and describes the purpose of each main section in a well-ordered documentation space. Outlines the sections and content within important individual pages in your documentation. You may have other ideas about how to organize documentation. If that\u2019s the case, fantastic! We encourage you to act on those thoughts and go for it. Let that passion and vision come out in your content organization and writing. However, we still encourage you to review this guide. Something here may help refine or improve the structure of your documentation.","title":"Introduction"},{"location":"guide/organization/org_intro/#next-steps","text":"Here are some recommendations: Start with the Section Outline . It provides and organizational blueprint for main sections of a documentation space. Next, review Homepage Theory and Purpose . It discusses the importance of a good homepage and guides you to other documents that show you how to create an effective and helpful homepage. Finally, just browse sections that seem interesting or relevant to the documentation issues you or your team are struggling with.","title":"Next steps"},{"location":"guide/organization/org_intro/#help-and-support","text":"Placeholder for boilerplate help text.","title":"Help and support"},{"location":"guide/organization/org_other/","text":"Other Content Sections These are sections and pages that comprise the the bulk of your documentation. Here are 2 examples. Example 1 You could put this general documentation in sections that are titled after the topics that most of the docs cover. For example, look at this table of contents used by the Storage team. Notice how each of the top level sections are titled based on the topic of their contents (e.g. Cloud Bigtable, Cloud Spanner, Cloud SQL). All of these are \"other\" type sections organized by topic. Example 2 Here's another example from the gRPC team. They've put content under a top level parent titled \"User Guide.\" This is yet another way to organize the general mass of pages in your Backstage space. Aside from these examples, it's up to you to organize this \"middle part\" of your documentation. Reach out to the technical writers if you have any questions. We're on Slack at #tech-writing.","title":"Other Content Sections"},{"location":"guide/organization/org_other/#other-content-sections","text":"These are sections and pages that comprise the the bulk of your documentation. Here are 2 examples.","title":"Other Content Sections"},{"location":"guide/organization/org_other/#example-1","text":"You could put this general documentation in sections that are titled after the topics that most of the docs cover. For example, look at this table of contents used by the Storage team. Notice how each of the top level sections are titled based on the topic of their contents (e.g. Cloud Bigtable, Cloud Spanner, Cloud SQL). All of these are \"other\" type sections organized by topic.","title":"Example 1"},{"location":"guide/organization/org_other/#example-2","text":"Here's another example from the gRPC team. They've put content under a top level parent titled \"User Guide.\" This is yet another way to organize the general mass of pages in your Backstage space. Aside from these examples, it's up to you to organize this \"middle part\" of your documentation. Reach out to the technical writers if you have any questions. We're on Slack at #tech-writing.","title":"Example 2"},{"location":"guide/organization/org_outline/","text":"Section Outline Here\u2019s a blueprint to follow when you\u2019re not sure about how to organize your documentation space or what kind of sections you should include. These are recommendations, not rules or requirements. If you have a good docs structure that works, keep it. If you're not sure what to do try using the simple outline shown here. Section Outline The outline below provides a suggested table of contents (TOC) for a documentation space. Each main section can be a standalone parent page or a parent object that contains child pages. I. Homepage/landing page II. Overview III. Getting Started IV. Other content V. FAQs VI. ADRs MkDocs and the TOC We're using MkDocs to build and organize the space and content you're reading now. For anyone using MkDocs, you edit the mkdocs.yml file to add, delete, and reorganize the content hierarchy in your documentation space. LINK TBD Next steps Browse the Sections content for information about each of these main documentation components.","title":"Section Outline"},{"location":"guide/organization/org_outline/#section-outline","text":"Here\u2019s a blueprint to follow when you\u2019re not sure about how to organize your documentation space or what kind of sections you should include. These are recommendations, not rules or requirements. If you have a good docs structure that works, keep it. If you're not sure what to do try using the simple outline shown here.","title":"Section Outline"},{"location":"guide/organization/org_outline/#section-outline_1","text":"The outline below provides a suggested table of contents (TOC) for a documentation space. Each main section can be a standalone parent page or a parent object that contains child pages. I. Homepage/landing page II. Overview III. Getting Started IV. Other content V. FAQs VI. ADRs MkDocs and the TOC We're using MkDocs to build and organize the space and content you're reading now. For anyone using MkDocs, you edit the mkdocs.yml file to add, delete, and reorganize the content hierarchy in your documentation space. LINK TBD","title":"Section Outline"},{"location":"guide/organization/org_outline/#next-steps","text":"Browse the Sections content for information about each of these main documentation components.","title":"Next steps"},{"location":"guide/organization/org_overview/","text":"Overview The overview section gives you extra room to write about your service or product. You can make it one page long or create a parent/child section that contains multiple pages. Length depends on how much information you want to provide. If you use an overview, organize it as the second top-level section in the table of contents (TOC) after the homepage. Overviews are optional parts of your Backstage documentation. When to use You should consider adding an overview when: A service is too complex or contains subtle nuances that can't easily be described in the summary section of your homepage documentation. Your readers would benefit from a longer, high-level, strategic discussion about your service and something that plunges them into a tactical deep dive about how things work. You think it is important or helpful to your documentation. Contents and organization An overview section tells your readers why you created a service and how it works. Length and the amount of detail depends on how much you want to write. At its core, an overview is a concept document . It should include text and visual elements appropriate for that type of content. Location An overview is the \u201csecond chapter\u201d in your documentation. Place it in the TOC after the homepage. To organize content properly, edit your mkdocs.yml file as shown below. nav : - Home : index.md - Overview : <file-path>/<file-name.md> - # Other sections here Tip For more information about the mkdocs.yml file and how it creates the TOC, see the Table of Contents Deep Dive LINK TBD .","title":"Overview"},{"location":"guide/organization/org_overview/#overview","text":"The overview section gives you extra room to write about your service or product. You can make it one page long or create a parent/child section that contains multiple pages. Length depends on how much information you want to provide. If you use an overview, organize it as the second top-level section in the table of contents (TOC) after the homepage. Overviews are optional parts of your Backstage documentation.","title":"Overview"},{"location":"guide/organization/org_overview/#when-to-use","text":"You should consider adding an overview when: A service is too complex or contains subtle nuances that can't easily be described in the summary section of your homepage documentation. Your readers would benefit from a longer, high-level, strategic discussion about your service and something that plunges them into a tactical deep dive about how things work. You think it is important or helpful to your documentation.","title":"When to use"},{"location":"guide/organization/org_overview/#contents-and-organization","text":"An overview section tells your readers why you created a service and how it works. Length and the amount of detail depends on how much you want to write. At its core, an overview is a concept document . It should include text and visual elements appropriate for that type of content.","title":"Contents and organization"},{"location":"guide/organization/org_overview/#location","text":"An overview is the \u201csecond chapter\u201d in your documentation. Place it in the TOC after the homepage. To organize content properly, edit your mkdocs.yml file as shown below. nav : - Home : index.md - Overview : <file-path>/<file-name.md> - # Other sections here Tip For more information about the mkdocs.yml file and how it creates the TOC, see the Table of Contents Deep Dive LINK TBD .","title":"Location"},{"location":"guide/style/hbk_style_intro/","text":"Introduction This section of the Handbook provides recommendations on how write and style specific text elements. These recommendations are based on common writing issues that appear frequently in draft, work-in-progress content. Advice about rules Here at the Handbook , we believe these guidelines help promote good writing. However, like the pirate code, sometimes rules are rules and sometimes they're just suggestions. It's always a good practice to follow these rules, but there may be times when you need to bend or break them. Whatever you decide to do, just be consistent in doing it.","title":"Introduction"},{"location":"guide/style/hbk_style_intro/#introduction","text":"This section of the Handbook provides recommendations on how write and style specific text elements. These recommendations are based on common writing issues that appear frequently in draft, work-in-progress content.","title":"Introduction"},{"location":"guide/style/hbk_style_intro/#advice-about-rules","text":"Here at the Handbook , we believe these guidelines help promote good writing. However, like the pirate code, sometimes rules are rules and sometimes they're just suggestions. It's always a good practice to follow these rules, but there may be times when you need to bend or break them. Whatever you decide to do, just be consistent in doing it.","title":"Advice about rules"},{"location":"guide/types/concepts/","text":"Concept Documentation Concept documentation explains and describes. For example, you might write a concept piece to explain an idea at a high level or describe why your team created a particular system. Conceptual content can also include detailed information or a strategic analysis of a product or service. Write concept docs to tell readers why you created something rather than how to use it. Features Common features of concept documentation include: Descriptive titles that suggest or summarize the main topics. Sections of related content separated by informative headers. Notes, tips, warnings, and other call-outs that focus attention on important items. Numbered or bulleted lists that do not enumerate procedures or task steps. Tables Images and diagrams Code samples Style advice Write concept documentation in the present tense and use the active voice . This style is ideal for expressing facts and helps make writing authoritative. Content that is accurate and frank builds user trust in your documentation and products. Additionally, present-tense writing imparts a \u201ctimeless\u201d quality to your documentation. Timelessness is important because you don\u2019t want documentation to read as stale or dated as time passes. For example, even if the code underlying a system changes, the purpose of a system may remain the same. With the present tense, your content remains valid and accurate even after you refactor code. Save yourself from future work. Write in the present tense. What to avoid Conceptual documentation shouldn't contain tasks, procedural steps, or reference information. Task and reference content are separate topic types. Documentation for these topics follow a different set of standards.","title":"Concept Documentation"},{"location":"guide/types/concepts/#concept-documentation","text":"Concept documentation explains and describes. For example, you might write a concept piece to explain an idea at a high level or describe why your team created a particular system. Conceptual content can also include detailed information or a strategic analysis of a product or service. Write concept docs to tell readers why you created something rather than how to use it.","title":"Concept Documentation"},{"location":"guide/types/concepts/#features","text":"Common features of concept documentation include: Descriptive titles that suggest or summarize the main topics. Sections of related content separated by informative headers. Notes, tips, warnings, and other call-outs that focus attention on important items. Numbered or bulleted lists that do not enumerate procedures or task steps. Tables Images and diagrams Code samples","title":"Features"},{"location":"guide/types/concepts/#style-advice","text":"Write concept documentation in the present tense and use the active voice . This style is ideal for expressing facts and helps make writing authoritative. Content that is accurate and frank builds user trust in your documentation and products. Additionally, present-tense writing imparts a \u201ctimeless\u201d quality to your documentation. Timelessness is important because you don\u2019t want documentation to read as stale or dated as time passes. For example, even if the code underlying a system changes, the purpose of a system may remain the same. With the present tense, your content remains valid and accurate even after you refactor code. Save yourself from future work. Write in the present tense.","title":"Style advice"},{"location":"guide/types/concepts/#what-to-avoid","text":"Conceptual documentation shouldn't contain tasks, procedural steps, or reference information. Task and reference content are separate topic types. Documentation for these topics follow a different set of standards.","title":"What to avoid"},{"location":"guide/types/reference/","text":"Reference Documentation Reference documentation explains, lists, and describes or defines features like buttons, menu options, code, dataset fields, API functions, and architectural decision records (ADRs). You write reference documents to help your users better understand the details of individual components of a product or system. Features Common features of a reference document include: Descriptive titles that suggest or summarize the main topics. A multi-column table that lists terms and their corresponding definitions. A basic, 2-column term and definition layout is sufficient. Style advice Keep your reference docs simple. Written content should consist mainly of a term and its related definition. Tables are great for reference material. When defining dataset fields, file names, or code, use formatting that gives each term a code-like appearance and use plain text definitions. If you're not writing about code, just use plain text. What to avoid Long-form conceptual content or task topics don't belong in a reference document. Link to those documents rather than stuffing unrelated information in a reference document. Try to keep table columns to a minimum. If you need more than 3 or 4 columns, think about combining that content or using another layout.","title":"Reference Documentation"},{"location":"guide/types/reference/#reference-documentation","text":"Reference documentation explains, lists, and describes or defines features like buttons, menu options, code, dataset fields, API functions, and architectural decision records (ADRs). You write reference documents to help your users better understand the details of individual components of a product or system.","title":"Reference Documentation"},{"location":"guide/types/reference/#features","text":"Common features of a reference document include: Descriptive titles that suggest or summarize the main topics. A multi-column table that lists terms and their corresponding definitions. A basic, 2-column term and definition layout is sufficient.","title":"Features"},{"location":"guide/types/reference/#style-advice","text":"Keep your reference docs simple. Written content should consist mainly of a term and its related definition. Tables are great for reference material. When defining dataset fields, file names, or code, use formatting that gives each term a code-like appearance and use plain text definitions. If you're not writing about code, just use plain text.","title":"Style advice"},{"location":"guide/types/reference/#what-to-avoid","text":"Long-form conceptual content or task topics don't belong in a reference document. Link to those documents rather than stuffing unrelated information in a reference document. Try to keep table columns to a minimum. If you need more than 3 or 4 columns, think about combining that content or using another layout.","title":"What to avoid"},{"location":"guide/types/tasks_complex/","text":"Task Documentation for Complex Procedures Complex procedures are tasks that require, say, 6 (or more) steps to complete. And, similar to a simple task , you explain how to do something rather than why you created it. Examples For tasks that require a lot of steps, organize the instructions into short sections and restart the step numbers in each new section. Here's an example of how to write a long, complex task document. Features Task documentation for long, complex procedures includes the same textual components as a simple task documents. These include: Separating steps into related sections. Numbered steps (if steps must be completed sequentially). Restart the numbering in each section. Bulleted steps (if steps don't need to follow in sequential order). Step options and step results. Images. Style advice Group related sets of steps together. For example, maybe your process begins with steps that require you to name and describe something. Later steps may require connecting to data sets or identifying external customers. Organize related steps into their own sections and identify that part of the process with a logical section header. See also, the style advice in Documentation for Simple Procedures .","title":"Documentation for Complex Procedures"},{"location":"guide/types/tasks_complex/#task-documentation-for-complex-procedures","text":"Complex procedures are tasks that require, say, 6 (or more) steps to complete. And, similar to a simple task , you explain how to do something rather than why you created it.","title":"Task Documentation for Complex Procedures"},{"location":"guide/types/tasks_complex/#examples","text":"For tasks that require a lot of steps, organize the instructions into short sections and restart the step numbers in each new section. Here's an example of how to write a long, complex task document.","title":"Examples"},{"location":"guide/types/tasks_complex/#features","text":"Task documentation for long, complex procedures includes the same textual components as a simple task documents. These include: Separating steps into related sections. Numbered steps (if steps must be completed sequentially). Restart the numbering in each section. Bulleted steps (if steps don't need to follow in sequential order). Step options and step results. Images.","title":"Features"},{"location":"guide/types/tasks_complex/#style-advice","text":"Group related sets of steps together. For example, maybe your process begins with steps that require you to name and describe something. Later steps may require connecting to data sets or identifying external customers. Organize related steps into their own sections and identify that part of the process with a logical section header. See also, the style advice in Documentation for Simple Procedures .","title":"Style advice"},{"location":"guide/types/tasks_simple/","text":"Documentation for Simple Procedures Task documentation breaks down a workflow into the sequential or non-sequential steps required to complete a process. Write task docs to explain how to use the thing you built rather than why you created it. Structure This diagram demonstrates how to organize a simple task document: Important Describing each step in a task is essential. This includes obvious steps like \"Click Save .\" After all, simple actions might not be self-evident so you need to include them. For your readers, few things are more maddening than vague or incomplete instructions. You just gotta do it. Features Common features of task documentation include: Descriptive titles that suggest or summarize the main topic. Numbered steps (if steps must be completed sequentially). Bold text for UI elements that you interact with. See the section on Bold Text LINK TBD. Bulleted steps (if steps don't need to follow in sequential order). The text \" (Optional) \" at the beginning of a step to indicate that it isn't required. Images. Separate sections to break up long procedures. See also Documentation for Complex Procedures . Style advice When writing task documentation: Start the document title with a verb that matches the procedure (e.g., Create, Build, Configure, Implement, etc.). This indicates the document's type (task) and content (steps on how to do something). Start the procedure right away. Avoid long introductions or overviews (use a concept page for that). It is OK to note task pre- and post-requisites or provide context, but try to start the task steps quickly. Start each step using a verb in the imperative mood . For example, \"Click this,\" \"Select that,\" \"Choose X.\" Procedural steps are commands, not requests. Link to other docs that describe step options or strategies. You can list the options (try bullets), but don't clutter up instructions with extensive explanations. Put that information in a separate document. Follow the advice in Writing About UI Controls LINK TBD when describing user interactions with UI features. What to avoid Don't start your task doc with a long introduction or \"overview\" content. Put this information in a separate concept document . Remember, your users read task documents to complete a process. They want instructions. Don't bury the steps under a long introduction.","title":"Documentation for Simple Procedures"},{"location":"guide/types/tasks_simple/#documentation-for-simple-procedures","text":"Task documentation breaks down a workflow into the sequential or non-sequential steps required to complete a process. Write task docs to explain how to use the thing you built rather than why you created it.","title":"Documentation for Simple Procedures"},{"location":"guide/types/tasks_simple/#structure","text":"This diagram demonstrates how to organize a simple task document: Important Describing each step in a task is essential. This includes obvious steps like \"Click Save .\" After all, simple actions might not be self-evident so you need to include them. For your readers, few things are more maddening than vague or incomplete instructions. You just gotta do it.","title":"Structure"},{"location":"guide/types/tasks_simple/#features","text":"Common features of task documentation include: Descriptive titles that suggest or summarize the main topic. Numbered steps (if steps must be completed sequentially). Bold text for UI elements that you interact with. See the section on Bold Text LINK TBD. Bulleted steps (if steps don't need to follow in sequential order). The text \" (Optional) \" at the beginning of a step to indicate that it isn't required. Images. Separate sections to break up long procedures. See also Documentation for Complex Procedures .","title":"Features"},{"location":"guide/types/tasks_simple/#style-advice","text":"When writing task documentation: Start the document title with a verb that matches the procedure (e.g., Create, Build, Configure, Implement, etc.). This indicates the document's type (task) and content (steps on how to do something). Start the procedure right away. Avoid long introductions or overviews (use a concept page for that). It is OK to note task pre- and post-requisites or provide context, but try to start the task steps quickly. Start each step using a verb in the imperative mood . For example, \"Click this,\" \"Select that,\" \"Choose X.\" Procedural steps are commands, not requests. Link to other docs that describe step options or strategies. You can list the options (try bullets), but don't clutter up instructions with extensive explanations. Put that information in a separate document. Follow the advice in Writing About UI Controls LINK TBD when describing user interactions with UI features.","title":"Style advice"},{"location":"guide/types/tasks_simple/#what-to-avoid","text":"Don't start your task doc with a long introduction or \"overview\" content. Put this information in a separate concept document . Remember, your users read task documents to complete a process. They want instructions. Don't bury the steps under a long introduction.","title":"What to avoid"},{"location":"guide/types/types_intro/","text":"Topic-Based Writing and Document Types Topic-based writing reduces documentation for complex systems, processes, or workflows into discrete content categories or types. With a topic-based approach, each page covers a single topic only (1 page = 1 topic). Topic types You can organize documentation into 4 main topic types. Types and contents Each topic type contains specific information that the others don't. Excluding content based on topic helps you write because you don\u2019t have to include everything in one long article. Let\u2019s review the basic characteristics of each type. Type Contents Concept Concept documents explain ideas and describe how things work. Think of a concept piece as a deep, substantial, and informative discussion with your colleagues. A concept document doesn't contain task steps or procedures. See Concept Documentation for writing advice and examples. Task Task documents provide step-by-step instructions that show you how to complete a procedure. They organize content into ordered or unordered lists. A task document doesn't include long blocks of conceptual information. See Documenting Simple Procedures or Documenting Complex Procedures for writing advice and examples. Reference Reference documents list and define or describe things (e.g., UI features, dataset fields, glossary terms, API methods, FAQs, ADRs . These are hybrid documents because they can include information found in the other document types. See Reference Documentation for writing advice and examples. Tutorials Tutorials are a mixed document type. They can include the information found in all the other document types. This guide does not cover tutorials. Help and support Placeholder for generic help text and links.","title":"Topic-Based Writing and Documentation Types"},{"location":"guide/types/types_intro/#topic-based-writing-and-document-types","text":"Topic-based writing reduces documentation for complex systems, processes, or workflows into discrete content categories or types. With a topic-based approach, each page covers a single topic only (1 page = 1 topic).","title":"Topic-Based Writing and Document Types"},{"location":"guide/types/types_intro/#topic-types","text":"You can organize documentation into 4 main topic types.","title":"Topic types"},{"location":"guide/types/types_intro/#types-and-contents","text":"Each topic type contains specific information that the others don't. Excluding content based on topic helps you write because you don\u2019t have to include everything in one long article. Let\u2019s review the basic characteristics of each type. Type Contents Concept Concept documents explain ideas and describe how things work. Think of a concept piece as a deep, substantial, and informative discussion with your colleagues. A concept document doesn't contain task steps or procedures. See Concept Documentation for writing advice and examples. Task Task documents provide step-by-step instructions that show you how to complete a procedure. They organize content into ordered or unordered lists. A task document doesn't include long blocks of conceptual information. See Documenting Simple Procedures or Documenting Complex Procedures for writing advice and examples. Reference Reference documents list and define or describe things (e.g., UI features, dataset fields, glossary terms, API methods, FAQs, ADRs . These are hybrid documents because they can include information found in the other document types. See Reference Documentation for writing advice and examples. Tutorials Tutorials are a mixed document type. They can include the information found in all the other document types. This guide does not cover tutorials.","title":"Types and contents"},{"location":"guide/types/types_intro/#help-and-support","text":"Placeholder for generic help text and links.","title":"Help and support"},{"location":"resume/resume/","text":"Joe Wojak About I\u2019m a technical writer with experience in creating documentation for external customers and internal engineering teams. My focus has been on ad tech, but expanded at Spotify to include a broad array of engineering topics. During my career, I\u2019ve managed large, established documentation libraries and created content for new systems and services. My writing philosophy is to treat documentation like code and keep that content with the code. Experience This is a selected chronology of my work experience. Download my resume for a PDF version of this information. Spotify Senior Technical Writer, Amplify R&D, 2017-2022 Wrote and organized internal, developer-facing documentation sites for Spotify systems (e.g., Declarative Infrastructure, gRPC, GCS, Apollo). Created The Spotify Technical Writing Handbook , a writing and style guide for engineers. Wrote and revised \u201cGolden Path\u201d tutorials on engineering topics (e.g. pipeline/workflow creation, data science, data engineering, search/search indexing). Created Loom videos about how to write and use Backstage, Spotify\u2019s internal documentation system. Helped found a technical writing guild to coordinate and promote technical documentation at Spotify. Adobe Systems (again) Senior Technical Writer, Adobe Audience Manager , 2015-2017 Returned to Adobe to write external, customer-facing documentation for Audience Manager. Created and reorganized documentation for the Marketing Cloud ID Service, a new service for identifying devices across different Marketing Cloud platforms. Created new documentation for another new system, the Marketing Cloud Device Co-Op, a system that let advertisers share device IDs to expand reach. Helped API developers write API documentation for all the above services. Wrote and managed the bi-monthly release notes process. Tapad Senior Technical Writer for Tapad, a SaaS , cross-device targeting/ad-serving system, 2013-2017 First technical writer hired. Created and managed the original set of internal and external documentation for Tapad\u2019s probabilistic, cross-device ad targeting system. Worked with engineers to write API, Android, and iOS documentation. Demdex/Adobe Systems Demdex was a NYC-based startup acquired by Adobe. The product was renamed Adobe Audience Manager, 2011-2013 First technical writer hired. Created and managed the original set of developer- and customer-facing documentation. Migrated documentation from Google docs to Adobe\u2019s documentation system. Skills Methodology: Written work follows Darwin Information Typing Architecture ( DITA ) documentation standards. Technologies: HTML editors, DITA/XML systems (Oxygen, XMetaL), Markdown, GitHub, MkDocs. Others: Confluence, Coda, Loom (videos), LucidChart, Google (docs, slides, sheets), JIRA, Trello, Slack, Stack Overflow. Education Master of Arts: US History, University of Mississippi Bachelor of Arts: History, University of Missouri Military US Army, Honorable discharge. Contact Email: jwojak@gmail.com LinkedIn: www.linkedin.com/in/joewojak GitHub: jwwojak.github.io (and the site you're on now)","title":"Work Experience"},{"location":"resume/resume/#joe-wojak","text":"","title":"Joe Wojak"},{"location":"resume/resume/#about","text":"I\u2019m a technical writer with experience in creating documentation for external customers and internal engineering teams. My focus has been on ad tech, but expanded at Spotify to include a broad array of engineering topics. During my career, I\u2019ve managed large, established documentation libraries and created content for new systems and services. My writing philosophy is to treat documentation like code and keep that content with the code.","title":"About"},{"location":"resume/resume/#experience","text":"This is a selected chronology of my work experience. Download my resume for a PDF version of this information.","title":"Experience"},{"location":"resume/resume/#spotify","text":"Senior Technical Writer, Amplify R&D, 2017-2022 Wrote and organized internal, developer-facing documentation sites for Spotify systems (e.g., Declarative Infrastructure, gRPC, GCS, Apollo). Created The Spotify Technical Writing Handbook , a writing and style guide for engineers. Wrote and revised \u201cGolden Path\u201d tutorials on engineering topics (e.g. pipeline/workflow creation, data science, data engineering, search/search indexing). Created Loom videos about how to write and use Backstage, Spotify\u2019s internal documentation system. Helped found a technical writing guild to coordinate and promote technical documentation at Spotify.","title":"Spotify"},{"location":"resume/resume/#adobe-systems-again","text":"Senior Technical Writer, Adobe Audience Manager , 2015-2017 Returned to Adobe to write external, customer-facing documentation for Audience Manager. Created and reorganized documentation for the Marketing Cloud ID Service, a new service for identifying devices across different Marketing Cloud platforms. Created new documentation for another new system, the Marketing Cloud Device Co-Op, a system that let advertisers share device IDs to expand reach. Helped API developers write API documentation for all the above services. Wrote and managed the bi-monthly release notes process.","title":"Adobe Systems (again)"},{"location":"resume/resume/#tapad","text":"Senior Technical Writer for Tapad, a SaaS , cross-device targeting/ad-serving system, 2013-2017 First technical writer hired. Created and managed the original set of internal and external documentation for Tapad\u2019s probabilistic, cross-device ad targeting system. Worked with engineers to write API, Android, and iOS documentation.","title":"Tapad"},{"location":"resume/resume/#demdexadobe-systems","text":"Demdex was a NYC-based startup acquired by Adobe. The product was renamed Adobe Audience Manager, 2011-2013 First technical writer hired. Created and managed the original set of developer- and customer-facing documentation. Migrated documentation from Google docs to Adobe\u2019s documentation system.","title":"Demdex/Adobe Systems"},{"location":"resume/resume/#skills","text":"Methodology: Written work follows Darwin Information Typing Architecture ( DITA ) documentation standards. Technologies: HTML editors, DITA/XML systems (Oxygen, XMetaL), Markdown, GitHub, MkDocs. Others: Confluence, Coda, Loom (videos), LucidChart, Google (docs, slides, sheets), JIRA, Trello, Slack, Stack Overflow.","title":"Skills"},{"location":"resume/resume/#education","text":"Master of Arts: US History, University of Mississippi Bachelor of Arts: History, University of Missouri","title":"Education"},{"location":"resume/resume/#military","text":"US Army, Honorable discharge.","title":"Military"},{"location":"resume/resume/#contact","text":"Email: jwojak@gmail.com LinkedIn: www.linkedin.com/in/joewojak GitHub: jwwojak.github.io (and the site you're on now)","title":"Contact"}]}